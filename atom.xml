<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chillax's blog]]></title>
  <subtitle><![CDATA[Goals determine what you are going to be]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-04-08T15:11:05.957Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[huangjunhui]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git常用的基础命令]]></title>
    <link href="http://yoursite.com/2015/04/06/my-new-post/"/>
    <id>http://yoursite.com/2015/04/06/my-new-post/</id>
    <published>2015-04-06T11:52:45.000Z</published>
    <updated>2015-04-08T15:11:05.957Z</updated>
    <content type="html"><![CDATA[<h2 id="1-起步">1.起步</h2><h4 id="用户信息">用户信息</h4><p>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “youname”</span><br><span class="line">$ git config --global user.email “<span class="number">12345</span>@example.com”</span><br></pre></td></tr></table></figure></p>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。<br><a id="more"></a></p>
<h2 id="2-GIT基础">2.GIT基础</h2><h4 id="查看配置信息">查看配置信息</h4><p>查看已有的配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">$ git config <span class="operator">-l</span></span><br></pre></td></tr></table></figure></p>
<h4 id="获取帮助">获取帮助</h4><p>例如想获取config命令的帮助信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> config </span><br><span class="line">$ git config --help</span><br></pre></td></tr></table></figure></p>
<h4 id="初始化新仓库">初始化新仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<h4 id="跟踪文件：（将文件加到暂存区域）">跟踪文件：（将文件加到暂存区域）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure>
<h4 id="跟踪全部文件">跟踪全部文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>
<h4 id="提交更新">提交更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m “first version”</span><br></pre></td></tr></table></figure>
<h4 id="上传（推送）到github">上传（推送）到github</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<h4 id="从现有仓库克隆">从现有仓库克隆</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/youname/project.git</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:youname/project.git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/youname/project.git</span><br></pre></td></tr></table></figure>
<h4 id="检查当前文件状态">检查当前文件状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<h4 id="创建-gitignore文件">创建.gitignore文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .gitignore</span><br></pre></td></tr></table></figure>
<h4 id="查看修改之后没有暂存起来的内容">查看修改之后没有暂存起来的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure>
<h4 id="移除文件">移除文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm readme.txt</span><br></pre></td></tr></table></figure>
<h4 id="重命名文件">重命名文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv oldname.txt newname.txt</span><br></pre></td></tr></table></figure>
<h4 id="查看提交历史">查看提交历史</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h4 id="取消暂存">取消暂存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br></pre></td></tr></table></figure>
<h4 id="添加远程仓库（远程仓库必须先在github上建好）">添加远程仓库（远程仓库必须先在github上建好）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>
<h4 id="实例：">实例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:youname/yourRepo.git</span><br></pre></td></tr></table></figure>
<h4 id="推送数据到仓库">推送数据到仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>
<p>如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p>
<h4 id="从远程仓库抓取数据">从远程仓库抓取数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote-name]</span><br></pre></td></tr></table></figure>
<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库<br>远程仓库的删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure></p>
<h4 id="远程仓库重命名(此处命名的是上文添加远程仓库中的shortname)">远程仓库重命名(此处命名的是上文添加远程仓库中的shortname)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename origin origin2</span><br></pre></td></tr></table></figure>
<h4 id="自动补全">自动补全</h4><p>输入命令后按tab键，就会看到列出所有匹配的可用命令建议：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co&lt;tab&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-GIT分支">3.GIT分支</h2><h4 id="创建一个名为“testing”的分支">创建一个名为“testing”的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure>
<h4 id="切换到“testing”分支(默认为master分支)">切换到“testing”分支(默认为master分支)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure>
<h4 id="新建并切换到该分支">新建并切换到该分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b iss53</span><br></pre></td></tr></table></figure>
<h4 id="这条命令相当于执行下面这两条命令">这条命令相当于执行下面这两条命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch iss53</span><br><span class="line">$ git checkout iss53</span><br></pre></td></tr></table></figure>
<h4 id="删除hotfix分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）">删除hotfix分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="operator">-d</span> hotfix</span><br></pre></td></tr></table></figure>
<h4 id="强制删除hotfix分支（强制删除，不会提示错误）">强制删除hotfix分支（强制删除，不会提示错误）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D hotfix</span><br></pre></td></tr></table></figure>
<h4 id="合并iss53分支（先切换到master分支）">合并iss53分支（先切换到master分支）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge iss53</span><br></pre></td></tr></table></figure>
<h4 id="查看当前所有分支">查看当前所有分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>
<h4 id="查看各个分支最后一个提交对象的信息">查看各个分支最后一个提交对象的信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v</span><br></pre></td></tr></table></figure>
<h4 id="查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）">查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merge</span><br></pre></td></tr></table></figure>
<h4 id="查看未与当前分支合并的分支">查看未与当前分支合并的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure>
<h4 id="同步远程服务器数据到本地">同步远程服务器数据到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br></pre></td></tr></table></figure>
<h4 id="从新添加的远程仓库下载数据">从新添加的远程仓库下载数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add teamone git://git.team1.ourcompany.com</span><br><span class="line">$ git fetch teamone</span><br></pre></td></tr></table></figure>
<h4 id="分化一个新的分支(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)">分化一个新的分支(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="built_in">test</span>1 origin/master</span><br></pre></td></tr></table></figure>
<p>假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支</p>
<h4 id="删除该分支的方法">删除该分支的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :<span class="built_in">test</span>1</span><br></pre></td></tr></table></figure>
<h4 id="分支的衍合：将test1分支衍合到master主分支">分支的衍合：将test1分支衍合到master主分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="built_in">test</span>1</span><br><span class="line">$ git rebase master</span><br></pre></td></tr></table></figure>
<h4 id="另一种方法，直接衍合，不用再先切换到test1">另一种方法，直接衍合，不用再先切换到test1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase master <span class="built_in">test</span>1</span><br></pre></td></tr></table></figure>
<h4 id="快进master分支">快进master分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge client</span><br></pre></td></tr></table></figure>
<p>衍合：一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-起步">1.起步</h2><h4 id="用户信息">用户信息</h4><p>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “youname”</span><br><span class="line">$ git config --global user.email “<span class="number">12345</span>@example.com”</span><br></pre></td></tr></table></figure></p>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始我的hexo博客]]></title>
    <link href="http://yoursite.com/2015/04/06/hello-world/"/>
    <id>http://yoursite.com/2015/04/06/hello-world/</id>
    <published>2015-04-06T10:52:45.000Z</published>
    <updated>2015-04-07T13:31:40.088Z</updated>
    <content type="html"><![CDATA[<p>早就听说过github这个高大上的东西，也进过github看过，但因自己的英语水平有限，在满是英文的github页面上逗留了一会便关掉页面。</p>
<p></p><p><br>一个月前，在家无所事事，偶然机会看到一篇关于建立个人博客的教程，自己虽然在csdn上有一个博客，但是经常看着各种大神高大尚的个人博客，内心不禁来了兴头，决定搞一个个人博客。<br><a id="more"></a><br>因为我看到的建站教程是基于github pages，因此不得不开始了自己的github之旅。有了自己的github后便跟着教程一步步跟着学，期间也搜索过各式各样的github快速入门教程，很快便熟悉了基本的操作。因为教程年代久远，因此肯定有七的八的问题，通过找资料，最终都解决了，但是成品惨不忍睹—太丑了，只能舍弃。之后我还通读了Pro Git的前三章，深化了自己对git的认识，本来打算通读Pro Git，但后来发现只有前三章的内容是常用的，因此便只读了前三章。</p>
<p></p><p><br>前几天，看到了自己同学的个人博客，感觉还不错，很是喜欢，便向其索要教程，之后便跟着zippera的教程一步一步走，终于是成功，博客的样子还不错，简洁大方，而hexo提供的本地预览功能也让我爱不释手，写博文使用的markdown也比较容易上手，因此便决定将此站定为自己的个人博客，希望能成为对技术不断学习的动力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>早就听说过github这个高大上的东西，也进过github看过，但因自己的英语水平有限，在满是英文的github页面上逗留了一会便关掉页面。</p>
<p><p><br>一个月前，在家无所事事，偶然机会看到一篇关于建立个人博客的教程，自己虽然在csdn上有一个博客，但是经常看着各种大神高大尚的个人博客，内心不禁来了兴头，决定搞一个个人博客。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
  </entry>
  
</feed>