<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chillax's blog]]></title>
  <subtitle><![CDATA[Goals determine what you are going to be]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://opiece.me/"/>
  <updated>2015-12-06T05:56:13.484Z</updated>
  <id>http://opiece.me/</id>
  
  <author>
    <name><![CDATA[Chillax]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[显示文章评论数]]></title>
    <link href="http://opiece.me/2015/12/06/add-article-comments/"/>
    <id>http://opiece.me/2015/12/06/add-article-comments/</id>
    <published>2015-12-06T05:50:31.000Z</published>
    <updated>2015-12-06T05:56:13.484Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因为工作的原因，已经很久没有折腾过博客，半年多的时间内，<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Concise</a>主题现在也拥有了一部分使用者。近期，比较多的人问过我一个问题：<strong>文章的评论数是怎么添加的</strong>，我后来回想了一下，因为当初自己增加这功能的时候，并没有立即出现效果，而是过了一段时间才显示的，所以并没有集成到<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Concise</a>主题内。随着此文章的发布，这个功能也已经同步更新到<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Concise</a>主题上，使用此主题的可以更新下。附：本人当初搞这功能参考的是<a href="http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e" target="_blank" rel="external">多说官方教程</a>。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><p>废话不多说，直接进入正题，以<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Concise</a>为例子，只需要修改两个地方，如果其他主题遇到问题可留言，本人将积极帮忙。<br>1.在<code>E:\hexo\themes\concise\layout\_partial\article.ejs</code>文件内的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>上面增加以下代码，如果找不到上面这行代码，则在<code>&lt;/footer&gt;</code>标签上面增加以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"comments-count"</span>&gt;</span><br><span class="line">			</span><br><span class="line">	&lt;a href=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;#comment"</span> class=<span class="string">"ds-thread-count icon-comment"</span> data-thread-key=<span class="string">"&lt;%- item.path %&gt;"</span> data-count-type=<span class="string">"comments"</span>&gt;&lt;/a&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2.在<code>E:\myblog\themes\concise\source\css\_partial\article.styl</code>文件内增加以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.comments-count</span><br><span class="line">  color lighten(color-gray,<span class="number">20</span>%)</span><br><span class="line">  <span class="built_in">float</span> right</span><br><span class="line">  a</span><br><span class="line">	.icon-comment:before</span><br><span class="line">	  font-family font-icon</span><br><span class="line">	  font-smoothing()</span><br><span class="line">	  content <span class="string">"\f075"</span></span><br><span class="line">  @media phonemax</span><br><span class="line">    <span class="built_in">float</span> left</span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>有其他任何问题，欢迎在下方留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>因为工作的原因，已经很久没有折腾过博客，半年多的时间内，<a href="https://github.com/huangjunhui/concise">Concise</a>主题现在也拥有了一部分使用者。近期，比较多的人问过我一个问题：<strong>文章的评论数是怎么添加的</strong>，我后来回想了一下，因为当初自己增加这功能的时候，并没有立即出现效果，而是过了一段时间才显示的，所以并没有集成到<a href="https://github.com/huangjunhui/concise">Concise</a>主题内。随着此文章的发布，这个功能也已经同步更新到<a href="https://github.com/huangjunhui/concise">Concise</a>主题上，使用此主题的可以更新下。附：本人当初搞这功能参考的是<a href="http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e">多说官方教程</a>。<br>]]>
    
    </summary>
    
      <category term="Concise" scheme="http://opiece.me/tags/Concise/"/>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="theme" scheme="http://opiece.me/tags/theme/"/>
    
      <category term="Concise" scheme="http://opiece.me/categories/Concise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Python基础教程》阅读笔记(1-2章)]]></title>
    <link href="http://opiece.me/2015/04/30/python-basic-tutorial-reading-notes-1/"/>
    <id>http://opiece.me/2015/04/30/python-basic-tutorial-reading-notes-1/</id>
    <published>2015-04-30T13:02:03.000Z</published>
    <updated>2015-04-30T13:07:32.466Z</updated>
    <content type="html"><![CDATA[<p>这几天开始阅读《Python基础教程》，老规矩，还是边看边写笔记，不过因为之前已经看了《Head_First_Python》，因此，在看《Python基础教程》时，与《Head_First_Python》重复的知识点就不记了。<br><a id="more"></a></p>
<h3 id="第一章：基础知识">第一章：基础知识</h3><p><strong>基础运算</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">1</span>//<span class="number">2</span>		<span class="comment">##整除</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">1</span>+<span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">2</span>**<span class="number">3</span>	<span class="comment">##幂运算(乘方)，2**3等价于pow(2,3)</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>一些函数运算</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; math.floor(<span class="number">3.9</span>)	<span class="comment">##返回数的下舍整数</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; math.ceil(<span class="number">2.1</span>)  <span class="comment">##返回数的上入证书</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; abs(-<span class="number">5</span>)			<span class="comment">##返回数字的绝对值</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt; math.sqrt(<span class="number">4</span>)		<span class="comment">##返回数字的平方根</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line">&gt;&gt;&gt; math.sqrt(-<span class="number">1</span>)	<span class="comment">##普通sqrt只能处理浮点数</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#27&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    math.sqrt(-<span class="number">1</span>)</span><br><span class="line">ValueError: math domain error</span><br><span class="line">&gt;&gt;&gt; import cmath   <span class="comment">##导入复数模块</span></span><br><span class="line">&gt;&gt;&gt; cmath.sqrt(-<span class="number">1</span>)	<span class="comment">##复数模块可以处理虚数</span></span><br><span class="line"><span class="number">1</span>j</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pow(<span class="number">2</span>,<span class="number">3</span>)		<span class="comment">##求幂运算</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt; round(<span class="number">2.555555</span>,<span class="number">3</span>)  <span class="comment">##根据给定的精度对数字进行四舍五入</span></span><br><span class="line"><span class="number">2.556</span></span><br><span class="line">&gt;&gt;&gt; round(<span class="number">2.444444</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">2.4444</span></span><br><span class="line">&gt;&gt;&gt; round(<span class="number">2.500000000</span>) <span class="comment">##不指定精度的情况</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; round(<span class="number">2.5000000001</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p><strong>str：</strong>把值转换为合理形式的字符串<br><strong>repr：</strong>创建一个字符串，以合法的Python表达式的形式来表示值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(repr(<span class="string">"hello world"</span>))</span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(str(<span class="string">"hello world"</span>))</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p>
<p><strong>原始字符串</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">'c:\nowhere'</span>) <span class="comment">##普通字符串碰到’\n’会换行</span></span><br><span class="line">c:</span><br><span class="line">owhere</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r<span class="string">'c:\nowhere'</span>)<span class="comment">##原始字符串以r开头，不会把反斜线当作特殊字符，</span></span><br><span class="line">c:\nowhere</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r<span class="string">'c:\nowhere\'</span>)	<span class="comment">##原始字符串的最后一个字符(引号前面的那个)不能是反斜线</span></span><br><span class="line">      </span><br><span class="line">SyntaxError: EOL <span class="keyword">while</span> scanning string literal</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r<span class="string">'c:\nowhere\\'</span>)<span class="comment">##2个反斜线没问题</span></span><br><span class="line">c:\nowhere\\</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r<span class="string">'c:\nowhere'</span> <span class="string">'\\'</span>)<span class="comment">##想在末尾输出1个反斜线，可以使用这种方法</span></span><br><span class="line">c:\nowhere\</span><br><span class="line">&gt;&gt;&gt; u<span class="string">'hello world!'</span>	<span class="comment">##unicode字符串，在Python3.0中，所有字符串都是unicode字符串</span></span><br><span class="line"><span class="string">'hello world!'</span></span><br></pre></td></tr></table></figure></p>
<h3 id="第二章：列表和元组">第二章：列表和元组</h3><p><strong>分片：</strong>包含第一个索引，不包含第二个索引，无论在左边还是右边开始取都遵循这个规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; n[-<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt; n[-<span class="number">3</span>:<span class="number">0</span>]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; n[-<span class="number">3</span>:]	<span class="comment">##第二个索引为空，默认输出到末尾</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">0</span>:]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]	</span><br><span class="line">&gt;&gt;&gt; n[:<span class="number">3</span>]	<span class="comment">##第一个索引为空，默认从头开始输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt; n[:]		<span class="comment">##两个索引都为空，输出整个序列</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; n[::<span class="number">2</span>]	<span class="comment">##设置步长为2，则每次跳过1个元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">0</span>:<span class="number">10</span>:<span class="number">3</span>]	<span class="comment">##设置步长为3，则每次跳过2个元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">0</span>:<span class="number">10</span>:-<span class="number">1</span>]	<span class="comment">##步长可以为负数，此时从右向左提取元素，但此时索引也要进行对换(大的在前，小的在后)</span></span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">10</span>:<span class="number">0</span>:-<span class="number">1</span>]	</span><br><span class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">10</span>:<span class="number">0</span>:-<span class="number">3</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">5</span>:<span class="number">0</span>:-<span class="number">1</span>]	<span class="comment">##此时取索引为5的，不取索引为0的(第一个索引为5)</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>]		<span class="comment">##此时取索引为0的，不取索引为5的(第一个索引为0)</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; n[<span class="number">5</span>::-<span class="number">2</span>]		<span class="comment">##步长为负数，此处相当于n[5:0:-2]，</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt; n[:<span class="number">5</span>:-<span class="number">2</span>]		<span class="comment">##步长为负数，此处相当于n[10:5:-2]，</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p>
<p>对于一个正数步长，Python会从序列的头部开始向右提取元素，直到最后一个元素；对于负数步长，则是从序列的尾部开始向左提取元素，直到第一个元素。</p>
<p><strong>列表</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = list(<span class="string">'hello'</span>)	<span class="comment">##根据字符串创建列表</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="string">''</span>.join(a)		<span class="comment">##将由字符串组成的列表转换为字符串</span></span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; name = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>,<span class="string">'dd'</span>,<span class="string">'ee'</span>,<span class="string">'ff'</span>]</span><br><span class="line">&gt;&gt;&gt; del name[<span class="number">1</span>]		<span class="comment">##删除元素</span></span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">[<span class="string">'aa'</span>, <span class="string">'cc'</span>, <span class="string">'dd'</span>, <span class="string">'ee'</span>, <span class="string">'ff'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; name = list(<span class="string">'Perl'</span>)</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">[<span class="string">'P'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>]</span><br><span class="line">&gt;&gt;&gt; name[<span class="number">1</span>:] = list(<span class="string">'ython'</span>)	<span class="comment">##分片赋值，替换掉原来的元素</span></span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">[<span class="string">'P'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; number = [<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; number[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]	<span class="comment">##分片赋值，不替换原来元素的情况下插入新的元素</span></span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; number[<span class="number">5</span>:]=[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; number[<span class="number">0</span>:<span class="number">10</span>:<span class="number">2</span>] = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]	<span class="comment">#将步长改为2后，如果要进行替换必须替换范围内的所有数</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#129&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    number[<span class="number">0</span>:<span class="number">10</span>:<span class="number">2</span>] = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended slice of size <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt; number[<span class="number">0</span>:<span class="number">10</span>:<span class="number">2</span>] = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">[<span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt; number[<span class="number">0</span>:<span class="number">10</span>:<span class="number">4</span>] = [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]	<span class="comment">##步长为4</span></span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">[<span class="number">21</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>列表方法</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">test</span> = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'vv'</span>,<span class="string">'cc'</span>,<span class="string">'bb'</span>]</span><br><span class="line">&gt;&gt;&gt; test.count(<span class="string">'bb'</span>)	<span class="comment">##计数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; test.index(<span class="string">'bb'</span>)	<span class="comment">##查找第一个匹配项的索引位置</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]	</span><br><span class="line">&gt;&gt;&gt; x.reverse()	<span class="comment">##反转</span></span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt; y = x	<span class="comment">##这样写，x和y会指向同一个列表</span></span><br><span class="line">&gt;&gt;&gt; y.sort()</span><br><span class="line">&gt;&gt;&gt; y	</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]	</span><br><span class="line">&gt;&gt;&gt; y = x[:]		<span class="comment">##这样写，y得到的是包含了x所有元素的分片</span></span><br><span class="line">&gt;&gt;&gt; y.sort()</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = [<span class="string">'aaa'</span>,<span class="string">'aa'</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaaa'</span>,<span class="string">'a'</span>]</span><br><span class="line">&gt;&gt;&gt; x.sort(key = len)		<span class="comment">##指定排序方法为：按字符串长度排序</span></span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'aaa'</span>, <span class="string">'aaaa'</span>, <span class="string">'aaaaa'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt; x.sort(reverse = True)	<span class="comment">##指定排序方式为：降序</span></span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>元组</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>	<span class="comment">##这样也算创建了一个元组，元组大多情况都是通过圆括号括起来</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="number">32</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">32</span>,</span><br><span class="line">(<span class="number">32</span>,)</span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span>*(<span class="number">40</span>+<span class="number">2</span>)	<span class="comment">##普通运算</span></span><br><span class="line"><span class="number">126</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span>*(<span class="number">40</span>+<span class="number">2</span>,)	<span class="comment">##元组</span></span><br><span class="line">(<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])	<span class="comment">##tuple函数：以一个序列作为参数并把它转换为元组，如果参数就是元组，则返回原样</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; tuple(<span class="string">'abc'</span>)		<span class="comment">##参数是字符串</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">&gt;&gt;&gt; tuple((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))	<span class="comment">##参数是元组的情况</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>	<span class="comment">##元组的分片跟列表的分片一样</span></span><br><span class="line">&gt;&gt;&gt; x[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt; x[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; x[<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p><strong>元组存在的意义：</strong><br>1.元组可以在映射（和集合的成员）中当作键使用——而列表则不行<br>2.元组作为很多内建函数和方法的返回值存在，也就是说你必须对元组进行处理。只要不尝试修改元组，那么，“处理”元组在绝大多数情况下就是把它们当作列表来进行操作(除非需要使用一些元组没有的方法，例如index和count)</p>
<p><strong>小结：</strong><br>1.序列。序列是一种数据结构，它包含的元素都进行了编号（从0开始）。典型的序列包括列表、字符串和元组。其中，列表是可变的（可以进行修改），而元组和字符串是不可变的(一旦创建了就是固定的)。通过分片操作可以访问序列的一部分，其中分片需要两个索引号来指出分片的起始和结束位置。想要改变列表，则要对相应的位置进行赋值，或者使用赋值语句重写整个分片。<br>2.成员资格。in操作符可以检查一个值是否存在于序列（或者其他容器）中。对字符串使用in操作符是一个特例——它可以查找子字符串。<br>3.方法。一些内建类型（例如列表和字符串，元组则不在其中）具有很多有用的方法。这些方法有些像函数——不过它们与特定值联系得更密切。方法是面向对象编程的一个重要概念，稍后的第7章中会对其进行讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这几天开始阅读《Python基础教程》，老规矩，还是边看边写笔记，不过因为之前已经看了《Head_First_Python》，因此，在看《Python基础教程》时，与《Head_First_Python》重复的知识点就不记了。<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://opiece.me/tags/Python/"/>
    
      <category term="Python基础教程" scheme="http://opiece.me/tags/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="笔记" scheme="http://opiece.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://opiece.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将hexo博客同时托管到github和gitcafe]]></title>
    <link href="http://opiece.me/2015/04/28/push-hexo-to-github-and-gitcafe/"/>
    <id>http://opiece.me/2015/04/28/push-hexo-to-github-and-gitcafe/</id>
    <published>2015-04-28T11:54:06.000Z</published>
    <updated>2015-12-06T06:11:08.707Z</updated>
    <content type="html"><![CDATA[<h3 id="动机">动机</h3><p>很多人都把hexo托管到github上，因为github大家都用的比较久了。但是，如果你的博客主要访问者肯定还是国内的用户，国内的用户访问gitcafe比github是要快不少的，如下图。<br><img src="http://i2.tietuku.com/a76361b97f178d70.png" alt=""><br><a id="more"></a><br>因此，我便萌生了将博客托管到gitcafe上的想法，但同时我又不想放弃在github上的更新。因此，便想到了，能不能同时更新到两个网站上，找了许多资料最终是找到了办法。</p>
<h3 id="解决办法">解决办法</h3><p>只要将博客根目录下的<code>_config.yml</code>的deploy修改成类似以下代码即可。我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  message: <span class="string">""</span></span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:huangjunhui/huangjunhui.github.io.git,master</span><br><span class="line">    gitcafe: git@gitcafe.com:huangjunhui/huangjunhui.git,gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>此外，在填写上面这段代码的时候请注意，上面这段代码左边的<code>-</code>号只能有2个(如下图红圈)，如果超过2个一般就是会被认定为填写格式有问题。<br><img src="http://i1.tietuku.com/5f568601746c58c4.png" alt=""></p>
<h3 id="域名解析">域名解析</h3><p>当你像我一样，把博客同时托管在gitcafe和github时。如果你有自己的域名，你在解析的时候就可以将国内访问解析到gitcafe上，国外访问解析到github上，可以参考下图我的设置。</p>
<p><img src="http://cejkw.img46.wal8.com/img46/533646_20151206140909/144938216984.png" alt=""></p>
<h3 id="参考">参考</h3><p><a href="http://ppting.me/2015/02/08/gitcafe/" target="_blank" rel="external">同时将博客部署在Github和Gitcafe上，并通过DNSPOD分流</a></p>
<p>如果你有任何问题，可以留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="动机">动机</h3><p>很多人都把hexo托管到github上，因为github大家都用的比较久了。但是，如果你的博客主要访问者肯定还是国内的用户，国内的用户访问gitcafe比github是要快不少的，如下图。<br><img src="http://i2.tietuku.com/a76361b97f178d70.png" alt=""><br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="托管" scheme="http://opiece.me/tags/%E6%89%98%E7%AE%A1/"/>
    
      <category term="hexo" scheme="http://opiece.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百度站长平台Sitemap(数据提交)抓取失败解决方法]]></title>
    <link href="http://opiece.me/2015/04/28/baiduzhanzhang-sitemap-grab-failure/"/>
    <id>http://opiece.me/2015/04/28/baiduzhanzhang-sitemap-grab-failure/</id>
    <published>2015-04-28T11:11:39.000Z</published>
    <updated>2015-04-28T11:41:16.578Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>前几天在百度站长活动：Sitemap大力抢的活动中，抢到了开通Sitemap的权限。<br><img src="http://i1.tietuku.com/c96fbda29e513872.png" alt=""><br><a id="more"></a></p>
<h3 id="问题描述">问题描述</h3><p>既然抢到了权限，不使用就太浪费了。于是就帮自己的博客搞了下Sitemap，但是无奈一直失败，找不到原因，sitemap单独访问是没问题的，但是就是抓取失败。<br><img src="http://i2.tietuku.com/53d617b34b6ca5e8.png" alt=""></p>
<h3 id="解决方法">解决方法</h3><p>直到今天，一个偶然的机会，让我把这个问题给解决了。首先，我的博客是同时托管到<a href="https://github.com/huangjunhui/huangjunhui.github.io" target="_blank" rel="external">github</a>和<a href="https://gitcafe.com/huangjunhui/huangjunhui" target="_blank" rel="external">gitcafe</a>上的，但是由于之前gitcafe上没设置自定义域名的关系，因此域名解析一直是解析到github上。今天，我找到原因，在gitcafe上设置了自定义域名后，便把国内访问博客的域名解析到了gitcafe上。<br>以前域名解析到github上的时候，抓取sitemap总是失败，提示访问不到服务器之类的。今天，把域名解析到gitcafe上，然后再来重新抓取了一下sitemap便才成功了。<br><img src="http://i2.tietuku.com/f226c3ea95f6409b.png" alt=""></p>
<h3 id="gitcafe设置自定义域名">gitcafe设置自定义域名</h3><p>1.点击进入项目，点击项目设置。<br><img src="http://i2.tietuku.com/831fc192f0748f21.png" alt=""></p>
<p>2.选择Pages服务，添加自己的域名即可，添加完可能需要几分钟才能访问，莫急。<br><img src="http://i2.tietuku.com/3248c5cdf84f4e08.png" alt=""></p>
<h3 id="添加sitemap的具体方法：">添加sitemap的具体方法：</h3><p>1.登陆<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长</a>。<br>2.如果你是第一次登陆，可能还要添加你的网站网址，然后验证。验证方法有三种(设置域名解析的)，建议使用第三种，前两种我没验证成功过，不知道是不是因为当时托管在github上的原因。<br>3.验证完后，点击下图的链接提交。<br><img src="http://i2.tietuku.com/1f4c350ee4d5ec20.png" alt=""></p>
<p>4.然后选择自动提交，提交方式：sitemap。填写更新周期，填写数据文件地址：该地址一般为：你的网站地址/sitemap.xml，然后提交即可。<br><img src="http://i2.tietuku.com/b8d582d7176ce6e1.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>前几天在百度站长活动：Sitemap大力抢的活动中，抢到了开通Sitemap的权限。<br><img src="http://i1.tietuku.com/c96fbda29e513872.png" alt=""><br>]]>
    
    </summary>
    
      <category term="sitemap" scheme="http://opiece.me/tags/sitemap/"/>
    
      <category term="常见问题" scheme="http://opiece.me/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
      <category term="常见问题" scheme="http://opiece.me/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Head_First_Python》阅读笔记(7、11章)]]></title>
    <link href="http://opiece.me/2015/04/24/head-first-python-reading-notes-2/"/>
    <id>http://opiece.me/2015/04/24/head-first-python-reading-notes-2/</id>
    <published>2015-04-24T07:03:57.000Z</published>
    <updated>2015-04-24T07:14:49.067Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因为第8，9章讲的是Android方面的，第10章用到了Google App Engine，所以这三章本人选择跳过。算是马马虎虎把这本书给读完了吧，花的时间比预计的多，之间跑去搞了会hexo主题的事情，因此延后了阅读的时间。总体来说，本书的质量还是不错的，适合Python入门，但想要深入理解Python肯定需要再看其他书籍。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><h3 id="第七章：web开发">第七章：web开发</h3><p><strong>生成html的辅助函数yate.py</strong></p>
<p><img src="http://i1.tietuku.com/a27070c02dcb9b54.png" alt=""><br><img src="http://i1.tietuku.com/0640482f9330e006.png" alt=""></p>
<p><strong>使用Python构建一个web服务器</strong></p>
<p><img src="http://i1.tietuku.com/96f4e8126135f1e6.png" alt=""></p>
<p><strong>调用yate.py生成html页面，显示选手列表</strong></p>
<p><img src="http://i1.tietuku.com/b321d2007525974e.png" alt=""></p>
<p><strong>调用yate.py生成html页面，显示选手最快的三个成绩</strong></p>
<p><img src="http://i1.tietuku.com/71abb9a635ade47a.png" alt=""></p>
<p><strong>Python术语：</strong><br>“@property”：这时一个修饰符，可以使类方法表现得像是一个类属性。<br>Web术语：<br>“CGI”：通用网关接口，允许web服务器运行一个服务器端程序。</p>
<p><strong>知识点：</strong><br>标准库string模块包括一个名为Template的类，它支持简单的字符串替换。<br>标准库http.server模块可以用来在Python中建立一个简单的web服务器。<br>标准库CGI模块对编写CGI脚本提供了支持。<br>标准库glob模块非常适合处理文件名列表。<br>启用标准库cgitb模块时，允许在浏览器中查看CGI编码错误。<br>CGI代码中可以使用cgitb.enable()打开CGI跟踪。<br>可以使用cgi.FieldStorage()访问作为web请求一部分发送给web服务器的数据，数据将作为一个Python字典。</p>
<h3 id="第十一章：数据加工">第十一章：数据加工</h3><p>一个预测跑步时间的例子：</p>
<p><strong>1.数据文件：</strong>总共有50列，只截出部分。</p>
<p><img src="http://i1.tietuku.com/1eff51ce6f99ad2a.png" alt=""></p>
<p><strong>2.辅助函数：</strong></p>
<p><img src="http://i1.tietuku.com/80c2440097c874fd.png" alt=""><br><img src="http://i1.tietuku.com/8000a7bd3ff80f5e.png" alt=""></p>
<p><strong>3.主函数：</strong></p>
<p><img src="http://i1.tietuku.com/3ed21e3799f0129b.png" alt=""></p>
<p><strong>4.测试：</strong></p>
<p><img src="http://i1.tietuku.com/b187eef6a3b1915f.png" alt=""></p>
<p><img src="http://i1.tietuku.com/63a990d4f54829ab.png" alt=""></p>
<p><strong>数据分析：</strong><br>图中步骤1：通过输入的distance_run(20k)和recorded_time(59:59)，计算出distance_run对应的行最接近recorded_time的时间，即1:00:23；步骤2为根据distance_run和1:00:23，计算出的VO2值，即79.3，步骤三为根据79.3和predicted_distance(Marathon)，计算出预测的时间，即2:14:15。</p>
<p><strong>Python术语：</strong><br>“条件”列表推导尾部包括一个“if”语句，允许在推导运行时控制哪些项可以增加到新列表中。<br>列表推导可以重写为一个等价的“for”循环。</p>
<p><strong>知识点：</strong><br>input()BIF允许为用户提供提示语并接收输入。<br>time模块作为标准库的一部分，包含了大量函数可以完成时间格式之间的转换。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>因为第8，9章讲的是Android方面的，第10章用到了Google App Engine，所以这三章本人选择跳过。算是马马虎虎把这本书给读完了吧，花的时间比预计的多，之间跑去搞了会hexo主题的事情，因此延后了阅读的时间。总体来说，本书的质量还是不错的，适合Python入门，但想要深入理解Python肯定需要再看其他书籍。<br>]]>
    
    </summary>
    
      <category term="Head_First_Python" scheme="http://opiece.me/tags/Head-First-Python/"/>
    
      <category term="Python" scheme="http://opiece.me/tags/Python/"/>
    
      <category term="笔记" scheme="http://opiece.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://opiece.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Concise主题介绍]]></title>
    <link href="http://opiece.me/2015/04/23/Concise-introduce/"/>
    <id>http://opiece.me/2015/04/23/Concise-introduce/</id>
    <published>2015-04-23T02:59:58.000Z</published>
    <updated>2015-07-09T08:03:05.477Z</updated>
    <content type="html"><![CDATA[<h2 id="Concise概括">Concise概括</h2><p><a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Concise</a>是一款为<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>设计的主题。我最早使用的是light主题，因为我非常喜欢light主题简约明朗的风格，之后看到<a href="http://yangjian.me/pacman/" target="_blank" rel="external">pacman</a>主题，很喜欢pacman的头部和尾部的设计，之间甚至起过要换主题的念头(真是太可怕了)。但pacman的body部分我不是很感冒，还是更喜欢light主题的body部分，两难之下，便产生了将pacman的头部和尾部移植到light主题下的想法。说干就干，利用了几天工作之余的时间将pacman的头部和尾部成功移植到了light主题下，于是Concise便产生了。主题源码托管在<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Github</a>上。如果你喜欢本主题，欢迎你在Github上Fork和Star，或者你出于鼓励的心态，也欢迎。如果你在使用本主题的过程中遇到任何问题，欢迎在本文下方留言，本人将竭我所能帮助你。当然，由于本人能力有限，并且该主题也是基于light主题进行修改的。因此，有些地方我可能也不懂，还请见谅。<br><a id="more"></a></p>
<h2 id="安装指南">安装指南</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/huangjunhui/concise.git themes/concise</span><br></pre></td></tr></table></figure>
<p>Concise是本人在Hexo3.0.0版本下制作的，因此，请你最好将Hexo升级到3.0.0。</p>
<h3 id="启用">启用</h3><p>修改你的博客根目录下的<code>config.yml</code>配置文件中的<code>theme</code>属性，将其修改为<code>concise</code>。</p>
<h3 id="更新">更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/concise</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
<p>更新前，请先备份你的<code>themes/concise/_config.yml</code>文件。</p>
<h2 id="配置指南">配置指南</h2><p>配置文件：<code>themes/concise/_config.yml</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####menu</span></span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br><span class="line">  About: /about</span><br><span class="line"><span class="comment">##菜单栏，如果你想把某个分类或者某个标签放在菜单栏上，可以通过以下方法实现。</span></span><br><span class="line"><span class="comment">##首先在博客根目录的source文件下创建两个文件夹tags和categories,并在文件夹下分别创建文件index.md</span></span><br><span class="line"><span class="comment">##tags的index.md文件的内容如下(记得去掉前面的##),categories的内容则将两个tags改成categories即可。</span></span><br><span class="line"><span class="comment">##layout: tags</span></span><br><span class="line"><span class="comment">##title: tags</span></span><br><span class="line"><span class="comment">##---</span></span><br><span class="line"><span class="comment">##最后在menu下进行配置即可，例如你要添加hexo分类，则在menu下添加hexo: /categories/hexo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####widgets</span></span><br><span class="line">widgets:</span><br><span class="line">- search		<span class="comment">##搜索</span></span><br><span class="line">- category	<span class="comment">##分类</span></span><br><span class="line">- tagcloud	<span class="comment">##标签云</span></span><br><span class="line">- weibo		<span class="comment">##新浪微博秀，需要你自己去新浪微博秀获取代码，然后将weibo.ejs中的代码替换掉</span></span><br><span class="line">- links		<span class="comment">##友情链接，你可以进入links.ejs进行编辑</span></span><br><span class="line"><span class="comment">##小插件，在concise/layout/_widget文件夹下提供了7个小插件，要使用的在widgets进行配置即可，</span></span><br><span class="line"><span class="comment">##不使用则去掉，其中search默认使用的google，如果你想使用和我一样的站内搜索，可以访问以下链接：</span></span><br><span class="line"><span class="comment">##http://opiece.me/2015/04/16/site-search-by-swiftype/</span></span><br><span class="line"></span><br><span class="line">duoshuo_<span class="built_in">enable</span>: <span class="literal">true</span>	<span class="comment">##不想用，改为false即可</span></span><br><span class="line">duoshuo_shortname: chillax     <span class="comment">##你的多说shortname，上面为true，这个才会起效果，在多说官网注册一个自己的站点，在生成的代码里可以看到自己的shortname，在此处将chillax改成你的多说shortname即可。</span></span><br><span class="line">tencent_sid: <span class="number">44218032</span></span><br><span class="line"><span class="comment">##tencent analysis，腾讯分析sid</span></span><br><span class="line">baidu_sid: <span class="number">7192</span>fa361f5cabb11d8a22de41c1ba8f</span><br><span class="line"><span class="comment">##baidu statistics id，百度统计sid，该sid为百度统计代码中：hm.src = "//hm.baidu.com/hm.js?之后的一串字符</span></span><br><span class="line"></span><br><span class="line">excerpt_link: Read more	<span class="comment">##文章摘要下方的阅读更多</span></span><br><span class="line"></span><br><span class="line">twitter:	<span class="comment">##twitter</span></span><br><span class="line">  username:</span><br><span class="line">  show_replies: <span class="literal">false</span></span><br><span class="line">  tweet_count: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Fancybox	##图片效果</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">google_analytics: 	<span class="comment">##google分析</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">#### RSS 	##RSS订阅</span></span><br><span class="line">rss: /atom.xml</span><br><span class="line"><span class="comment">## RSS address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Image</span></span><br><span class="line">imglogo:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>         <span class="comment">## 是否开启网站的logo，标题左边的logo。</span></span><br><span class="line">  src: imgs/logo.png   <span class="comment">## 图片放在`/concise/source/imgs`目录下,使用.svg和.png格式的图片.</span></span><br><span class="line">favicon: imgs/favicon.ico   <span class="comment">## 浏览器标签上显示的图片,放在`/concise/source/imgs`下.</span></span><br><span class="line">    </span><br><span class="line">author_img_<span class="built_in">enable</span>: <span class="literal">true</span>		<span class="comment">## 是否开启作者头像,左下角会旋转头像.</span></span><br><span class="line">author_img: imgs/author.jpg <span class="comment">## 作者头像的路径,以../comcise/source/文件夹为根路径,如果放在imgs文件夹下,格式如本人范例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 作者信息，主要用于右下角的一些小图标链接的显示</span></span><br><span class="line">author:</span><br><span class="line">  google_plus:    <span class="comment">## eg:116338260303228776998 for https://plus.google.com/u/0/116338260303228776998</span></span><br><span class="line">  intro_line1: <span class="string">"Hi,I'm the designer of this theme."</span>	<span class="comment">##博客底部的第一句话</span></span><br><span class="line">  intro_line2: <span class="string">"I will share this theme on github after a few week!"</span> <span class="comment">##底部底部的第二句话</span></span><br><span class="line">  weibo: 	  <span class="comment">## e.g. 1923610190 for http://weibo.com/1923610190</span></span><br><span class="line">  twitter:    <span class="comment">## e.g. yangjiansky for https://twitter.com/yangjiansky</span></span><br><span class="line">  github:     <span class="comment">## e.g. huangjunhui for https://github.com/huangjunhui </span></span><br><span class="line">  facebook:   <span class="comment">## e.g. yangjian for https://favebook.com/yangjian</span></span><br><span class="line">  tsina:      <span class="comment">## e.g. 1923610190  Your weibo ID,It will be used in share button.</span></span><br><span class="line">  linkedin:   <span class="comment">## e.g. in/jeffweiner08 for https://www.linkedin.com/in/jeffweiner08</span></span><br><span class="line">  email: jhhuang1993@foxmail.com<span class="comment">##填写你的email地址</span></span><br></pre></td></tr></table></figure></p>
<h2 id="FAQ">FAQ</h2><p><strong>问：我想要修改主题某些地方的颜色，去哪修改？</strong><br>答：主题的颜色大部分在<code>/themes/concise/variable.style</code>里，如果你想修改的是首部和尾部的颜色，修改color-theme和color-footer即可。</p>
<p><strong>问：友情链接怎么添加？</strong><br>答：你可以在<code>/concise/layout/_widget/links.ejs</code>进行添加。</p>
<p><strong>问：怎么在文章中使用文章目录，使得博客看起来更高大上一点啊？</strong><br>答：你只要在文章的标题下方添加<code>toc: true</code>即可启用文章目录。</p>
<p><strong>问：为什么启用左下角的旋转头像，也就是<code>author_img_enable: true</code>，头像的名称必须为<code>author.jpg</code>，不能自己定义吗？是不是博主的实力不行啊？</strong><br>答：<del>名字其实是可以自定义的，但如果你选择用其他的名字，则必须同时修改<code>concise/source/css/_partial/footer.styl</code>中的<code>background no-repeat url(&quot;../imgs/author.jpg&quot;) left top</code>,将<code>author.jpg</code>改成你使用图片的名称，至于url为什么不使用引用配置文件的方式，我自己也尝试过，但一直失败，如果有人知道，可以回复帮我。</del><br>此问题已经解决，现在可以自定义名字了，只要按要求填写好路径和图片名字即可。</p>
<p><strong>问：为什么左下角的头像不能旋转？</strong><br>答：在某些浏览器上，确实有头像不能旋转的问题。作为一位搞技术的人员，肯定是用逼格更高的chrome或firefox，在这两种浏览器下是没有问题的，如果你想体验旋转效果，请使用这两种浏览器。</p>
<p><strong>问：我是小白，也想要搭建一个自己的博客，并使用博主的主题，我该怎么办？</strong><br>答：本博客里有新鲜出炉的教程<a href="http://opiece.me/2015/04/09/hexo-guide/" target="_blank" rel="external">使用Hexo搭建个人博客(基于hexo3.0)</a>，文字言简意赅、清晰易懂，相当于手把手教，如果实在有问题，可以留言。</p>
<h2 id="总结">总结</h2><p>有其他任何问题，欢迎在下方留言，本主题刚刚发布，肯定有很多不足，还请见谅。如果你喜欢本主题，请在本主题的<a href="https://github.com/huangjunhui/concise" target="_blank" rel="external">Github</a>上进行star或fork，这样我更新的时候，你就能及时知道。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Concise概括">Concise概括</h2><p><a href="https://github.com/huangjunhui/concise">Concise</a>是一款为<a href="http://hexo.io">Hexo</a>设计的主题。我最早使用的是light主题，因为我非常喜欢light主题简约明朗的风格，之后看到<a href="http://yangjian.me/pacman/">pacman</a>主题，很喜欢pacman的头部和尾部的设计，之间甚至起过要换主题的念头(真是太可怕了)。但pacman的body部分我不是很感冒，还是更喜欢light主题的body部分，两难之下，便产生了将pacman的头部和尾部移植到light主题下的想法。说干就干，利用了几天工作之余的时间将pacman的头部和尾部成功移植到了light主题下，于是Concise便产生了。主题源码托管在<a href="https://github.com/huangjunhui/concise">Github</a>上。如果你喜欢本主题，欢迎你在Github上Fork和Star，或者你出于鼓励的心态，也欢迎。如果你在使用本主题的过程中遇到任何问题，欢迎在本文下方留言，本人将竭我所能帮助你。当然，由于本人能力有限，并且该主题也是基于light主题进行修改的。因此，有些地方我可能也不懂，还请见谅。<br>]]>
    
    </summary>
    
      <category term="Concise" scheme="http://opiece.me/tags/Concise/"/>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="theme" scheme="http://opiece.me/tags/theme/"/>
    
      <category term="Concise" scheme="http://opiece.me/categories/Concise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Head_First_Python》阅读笔记(1-6章)]]></title>
    <link href="http://opiece.me/2015/04/20/head-first-python-reading-notes-1/"/>
    <id>http://opiece.me/2015/04/20/head-first-python-reading-notes-1/</id>
    <published>2015-04-20T04:31:09.000Z</published>
    <updated>2015-07-08T07:30:38.135Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近利用闲暇时间开始学习Python，经朋友介绍，首先从《Head_First_Python》一书下手，现在读了一半，个人觉得此书非常有趣，内容包含了大量有趣的插图小故事，一次性读完100页都没有无聊的感觉，强力推荐Python新手阅读。还是老习惯，阅读过程中将一些知识点记录了下来，写成笔记，以用来查阅使用，也防止以后遗忘。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><h3 id="第一章：初识Python：人人都爱列表">第一章：初识Python：人人都爱列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; movies = [<span class="string">"The Holy Grail"</span>,<span class="string">"The Life of Brian"</span>,<span class="string">"The Meaning of Life"</span>]<span class="comment">#创建movies列表，类似数组</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(movies[<span class="number">1</span>]) 	<span class="comment">#使用标准的中括号偏移量来访问一个列表槽中的数据项</span></span><br><span class="line">The Life of Brian</span><br><span class="line">&gt;&gt;&gt; cast = [<span class="string">"Cleese"</span>,<span class="string">'Palin'</span>,<span class="string">'Jones'</span>,<span class="string">"Idle"</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)	<span class="comment">#显示整个列表</span></span><br><span class="line">[<span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(len(cast))	<span class="comment">#显示cast列表中的数据项个数</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast[<span class="number">1</span>])</span><br><span class="line">Palin</span><br><span class="line">&gt;&gt;&gt; cast.append(<span class="string">"Gilliam"</span>)	<span class="comment">#在列表末尾增加一个数据项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)</span><br><span class="line">[<span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>, <span class="string">'Gilliam'</span>]</span><br><span class="line">&gt;&gt;&gt; cast.pop()	<span class="comment">#删除列表数据的最后一项</span></span><br><span class="line"><span class="string">'Gilliam'</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)</span><br><span class="line">[<span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>]</span><br><span class="line">&gt;&gt;&gt; cast.extend([<span class="string">"Gilliam"</span>,<span class="string">"Chapman"</span>])	<span class="comment">#在列表末尾增加一个数据项集合</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)</span><br><span class="line">[<span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>, <span class="string">'Gilliam'</span>, <span class="string">'Chapman'</span>]</span><br><span class="line">&gt;&gt;&gt; cast.remove(<span class="string">"Chapman"</span>)		<span class="comment">#删除一个特定的数据项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)</span><br><span class="line">[<span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>, <span class="string">'Gilliam'</span>]</span><br><span class="line">&gt;&gt;&gt; cast.insert(<span class="number">0</span>,<span class="string">"Chapman"</span>)		<span class="comment">#在某个特定的位置前面增加一个数据项</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cast)</span><br><span class="line">[<span class="string">'Chapman'</span>, <span class="string">'Cleese'</span>, <span class="string">'Palin'</span>, <span class="string">'Jones'</span>, <span class="string">'Idle'</span>, <span class="string">'Gilliam'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; fav_movies = [<span class="string">"The Holy Grail"</span>,<span class="string">"The Life of Brian"</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> each_flick <span class="keyword">in</span> fav_movies:		<span class="comment">#使用for循环遍历列表</span></span><br><span class="line">	<span class="built_in">print</span>(each_flick)</span><br><span class="line"></span><br><span class="line">The Holy Grail</span><br><span class="line">The Life of Brian</span><br><span class="line">&gt;&gt;&gt; count = <span class="number">0</span>	<span class="comment">#使用while循环遍历列表</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">while</span> count&lt;len(movies):</span><br><span class="line">	<span class="built_in">print</span>(movies[count])</span><br><span class="line">	count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">The Holy Grail</span><br><span class="line"><span class="number">1975</span></span><br><span class="line">The Life of Brian</span><br><span class="line"><span class="number">1979</span></span><br><span class="line">The Meaning of Life</span><br><span class="line"><span class="number">1983</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; movies = [<span class="string">"The Holy Grail"</span>,<span class="number">1975</span>,<span class="string">"Terry Jones &amp; Terry Gilliam"</span>,<span class="number">91</span>,[<span class="string">"Graham Chapman"</span>,[<span class="string">"Michael Palin"</span>,<span class="string">"John Cleese"</span>,<span class="string">"Terry Gilliam"</span>,<span class="string">"Eric Idle"</span>,<span class="string">"Terry Jones"</span>]]]<span class="comment">#嵌套列表</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(movies[<span class="number">4</span>][<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">Eric Idle</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dir(__builtins__)		<span class="comment">#显示Python提供的内置方法列表，所有小写单词都是BIF(内置函数)</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">help</span>(input)		<span class="comment">#查看内置方法的使用方法</span></span><br><span class="line">&gt;&gt;&gt; def <span class="built_in">print</span>_lol(the_list):<span class="comment">#创建一个函数，其中函数名为print_lol，参数为the_list，本函数实现了递归</span></span><br><span class="line">	<span class="keyword">for</span> each_item <span class="keyword">in</span> the_list:		<span class="comment">#这行以下为函数代码组</span></span><br><span class="line">		<span class="keyword">if</span> isinstance(each_item,list): <span class="comment">#如果each_item是list</span></span><br><span class="line">			<span class="built_in">print</span>_lol(each_item)	</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(each_item)</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>_lol(movies)      <span class="comment">#调用了上面创建的函数(递归)</span></span><br><span class="line">The Holy Grail</span><br><span class="line"><span class="number">1975</span></span><br><span class="line">Terry Jones &amp; Terry Gilliam</span><br><span class="line"><span class="number">91</span></span><br><span class="line">Graham Chapman</span><br><span class="line">Michael Palin</span><br><span class="line">John Cleese</span><br><span class="line">Terry Gilliam</span><br><span class="line">Eric Idle</span><br><span class="line">Terry Jones</span><br></pre></td></tr></table></figure>
<p><strong>Python术语：</strong><br>BIF：内置函数。<br>组(suite)：Python代码块，会通过缩进来指示分组。<br><strong>知识点：</strong><br>标识符是指示数据对象的名字。标识符没有“类型”，不过标识符所指示的数据对象有类型。<br>列表可以存放任意数据，而且数据可以是混合类型。列表还可以包含其他列表。<br>列表可以随需要伸缩。数据使用的所有内存都由Python为你管理。<br>Python使用缩进将语句归组在一起。<br>isinstance()BIF会检查一个标识符是否指示某个指定类型的数据对象，例如isinstance(each_item,list)：检查each_item是否为list<br>cast.pop(n)：删除cast列表的第n项，第一项为cast.pop(0)，n为空删除最后一项</p>
<h3 id="第二章：共享你的代码：函数模块">第二章：共享你的代码：函数模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys;sys.path	<span class="comment">#Python模块位置，将代码放在以下位置，可以直接用import引入</span></span><br><span class="line">[<span class="string">''</span>, <span class="string">'D:\\Program Files (x86)\\Python3.3.5\\Lib\\idlelib'</span>, <span class="string">'C:\\Windows\\system32\\python33.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python3.3.5\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python3.3.5\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python3.3.5'</span>, <span class="string">'D:\\Program Files (x86)\\Python3.3.5\\lib\\site-packages'</span>]</span><br></pre></td></tr></table></figure>
<p><strong>构建发布</strong></p>
<p><img src="http://i2.tietuku.com/2a277a8e6efc5f2b.png" alt=""><br><img src="http://i2.tietuku.com/8a496b4823f5fa85.png" alt=""><br>我们已经有了一个文件夹，其中包含了两个文件：模块代码放在nester.py中，模块的有关数据放在setup.py中，现在来构架发布。<br>1、构建一个发布文件：在命令行窗口进入文件夹目录，执行以下命令<br><code>&gt; d:\Python33\python.exe setup.py sdist</code><br>2、将发布安装到Python本地副本中<br><code>&gt; d:\Python33\python.exe setup.py install</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import nester	//导入模块</span><br><span class="line">&gt;&gt;&gt; cast = [<span class="string">'palin'</span>,<span class="string">'cleese'</span>,<span class="string">'idle'</span>,<span class="string">'gilliam'</span>,<span class="string">'chapman'</span>]</span><br><span class="line">&gt;&gt;&gt; nester.print_lol(cast)		//使用模块中的<span class="built_in">print</span>_lol函数</span><br><span class="line">palin</span><br><span class="line">cleese</span><br><span class="line">idle</span><br><span class="line">gilliam</span><br><span class="line">chapman</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(level)	//遍历<span class="number">0</span>到level-<span class="number">1</span>，并将每次遍历的值赋给num</span><br><span class="line"><span class="built_in">print</span>(“\t”,end=’’)		//使<span class="built_in">print</span>不换行</span><br></pre></td></tr></table></figure></p>
<p><strong>Python术语：</strong><br>使用“三重引号字符串”可以在代码中加入一个多行注释。<br><strong>知识点：</strong><br>模块是一个包含Python代码的文本文件。<br>setpu.py程序提供了模块的元数据，用来构建、安装和上传打包的发布。<br>如果为函数参数提供一个缺省值，这个函数参数就是可选的。<br>使用#可以注释一行代码，或者为程序增加一个简短的单行注释。<br>range()BIF可以与for结合使用，从而迭代固定次数。<br>包含end=’’作为print()BIF的一个参数会关闭其默认行为(即在输入中自动包含换行。)</p>
<h3 id="第三章：文件与异常：处理错误">第三章：文件与异常：处理错误</h3><p><strong>文件操作</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os	//从标准库导入“os”</span><br><span class="line">&gt;&gt;&gt; os.getcwd()		//获得当前工作目录</span><br><span class="line"><span class="string">'D:\\Python33'</span>	</span><br><span class="line">&gt;&gt;&gt; os.chdir(<span class="string">'c:/python/HeadFirstPython/chapter3'</span>)		//切换为其他文件夹</span><br><span class="line">&gt;&gt;&gt; os.getcwd()</span><br><span class="line"><span class="string">'c:\\python\\HeadFirstPython\\chapter3'</span></span><br><span class="line">&gt;&gt;&gt; data = open(<span class="string">'sketch.txt'</span>)		//打开一个命令文件，将文件赋至一个名为“data”的文件对象</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(data.readline,end=<span class="string">''</span>)	//输出文件中的一个数据行</span><br><span class="line">&gt;&gt;&gt; data.seek(<span class="number">0</span>)		//退回到文件的起始位置</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> each_line <span class="keyword">in</span> data:		//使用<span class="keyword">for</span>循环遍历整个文件</span><br><span class="line">	<span class="built_in">print</span>(each_line,end=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; data.close()		//使用完毕记得关闭文件对象</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> each_line <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">if</span> not each_line.find(‘:’) == -<span class="number">1</span>		//检查each_line中是否存在’:’，如果不存在则返回-<span class="number">1</span></span><br><span class="line">		(role, line_spoken) = each_line.split(<span class="string">':'</span>, <span class="number">1</span>)	//根据’:’进行分解<span class="number">1</span>次，’:’前面赋值给role，后面赋值给line_spoken</span><br><span class="line">		<span class="built_in">print</span>(role, end=<span class="string">''</span>)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">' said: '</span>,end=<span class="string">''</span>)</span><br><span class="line">		<span class="built_in">print</span>(line_spoken,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p>
<p>两种列表：可变列表（用中括号包围），不可变列表（又称元组，用小括号包围）</p>
<p><strong>异常</strong><br>exception因运行时错误而出现，会产生一个traceback（运行时错误的详细描述）<br>数据不符合期望的格式时会出现ValueError，数据无法正常访问时会出现IOError。<br>异常处理机制：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:		//如果try语句中出现错误，则会执行except中的语句</span><br><span class="line">	......</span><br><span class="line">except:</span><br><span class="line">	pass		//可以认为是空语句或null语句</span><br><span class="line">finally:</span><br><span class="line">	......</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"><span class="keyword">if</span> os.path.exists(‘sketch.txt’):	//检查路径是否存在</span><br></pre></td></tr></table></figure>
<p><img src="http://i2.tietuku.com/c5f9a8f82ff2f406.png" alt=""></p>
<p><strong>Python术语：</strong><br>“异常”(exception)因运行时错误而出现，会产生一个traceback。<br><strong>知识点：</strong><br>使用open()BIF打开一个磁盘文件，创建一个迭代器从文件读取数据，一次读取一个数据行。<br>Python中不可该表的常量列表称为元组。一旦将列表数据赋至一个元组，就不能再该表。<br>pass语句就是Python的空语句或null语句，它什么也不做。</p>
<h3 id="第四章：持久存储：数据保存到文件">第四章：持久存储：数据保存到文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; out = open(<span class="string">"data.out"</span>,<span class="string">"w"</span>)	//以写模式打开文件data.out，如果文件存在则清空内容，不存在则创建一个</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Norwegian Blue stun easily."</span>,file = out)	//标准输出是屏幕，使用file将写数据对象改为out文件</span><br><span class="line">&gt;&gt;&gt; out.close()	//关闭文件，此时才会将数据写入至磁盘，称为刷新输出</span><br></pre></td></tr></table></figure>
<p>追加到一个文件：a<br>完成写和读：w+</p>
<p><code>if &#39;data&#39; in locals():    //locals()会返回当前作用域中定义的所有名的一个集合</code></p>
<p>代码1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">	data = open(<span class="string">'its.txt'</span>, “w”)</span><br><span class="line">	<span class="built_in">print</span>(“It’s...”, file = data)</span><br><span class="line">except IOError as err:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'File error: '</span>+ str(err))</span><br><span class="line">finally:</span><br><span class="line">	<span class="keyword">if</span> <span class="string">'data'</span> <span class="keyword">in</span> locals():</span><br><span class="line">		data.close()</span><br></pre></td></tr></table></figure></p>
<p>代码2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">	with open(‘its.txt’, “w”) as data:</span><br><span class="line">		<span class="built_in">print</span>(“It’s...”, file = data)</span><br><span class="line">except IOError as err:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'File error: '</span>+ str(err))</span><br></pre></td></tr></table></figure></p>
<p>代码1和代码2的在功能上完全相同，with语句利用了一种名为上下文管理协议的Python技术。</p>
<p>多个调用的情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(‘data1.txt’, “w”) as data1:</span><br><span class="line">	<span class="built_in">print</span>(“It’s...”, file = data1)</span><br><span class="line">with open(‘data2.txt’, “w”) as data2:</span><br><span class="line">	<span class="built_in">print</span>(“It’s...”, file = data2)</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(‘data1.txt’, “w”) as data1,open(‘data2.txt’, “w”) as data2:</span><br><span class="line">	<span class="built_in">print</span>(“It’s...”, file = data1)</span><br><span class="line">	<span class="built_in">print</span>(“It’s...”, file = data2)</span><br></pre></td></tr></table></figure></p>
<p><strong>“腌制”数据：pickle</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pickle	//导入pickle模块</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(<span class="string">'mydata.pickle'</span>,<span class="string">'wb'</span>) as mysavedata:		//wb：使用二进制写打开</span><br><span class="line">        pickle.dump([<span class="number">1</span>,<span class="number">2</span>,<span class="string">'three'</span>],mysavedata)		//使用dump保存数据到文件</span><br><span class="line"></span><br><span class="line">    with open(<span class="string">'mydata.pickle'</span>,<span class="string">'rb'</span>) as myrestoredata:	//rb：使用二进制读打开</span><br><span class="line">        a_list = pickle.load(myrestoredata)		//使用load从文件中恢复数据，并赋至a_list</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a_list)</span><br><span class="line">except:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="http://i2.tietuku.com/3a91b8ebc5364e95.png" alt=""></p>
<p><strong>Python术语：</strong><br>“腌制”：将数据对象保存到一个持久存储中的过程。<br>“解除腌制”：从持久存储中恢复一个已保存的数据对象的过程。<br><strong>知识点：</strong><br>strip()方法可以从字符串去除不想要的空白符<br>print()的file参数控制将数据发送/保存到哪里<br>finally组总会执行，而不论try/except语句中出现什么异常<br>会向except组传入一个异常对象，并使用as关键字赋至一个标识符<br>str()可以用来访问任何数据对象(支持串转换)的串表示<br>locals()返回当前作用域的变量集合<br>in操作符用于检查成员关系<br>“+”操作符用于字符串时将联接两个字符串，用于数字时则会将两个数相加<br>with语句会自动处理所有已经打开文件的关闭工作，即使出现异常也不例外。with语句也使用as关键字<br>sys.stdout是Python中所谓的“标准输出”，可以从标准库的sys模块访问<br>标准库的pickle模块允许你容易而高效地将Python数据对象保存到磁盘及从磁盘恢复。<br>pickle.dump()函数将数据保存到磁盘<br>pickle.load()函数从磁盘回复数据</p>
<h3 id="第五章：处理数据">第五章：处理数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">[<span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; data.sort()	//对数据进行原地排序</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]	//数据顺序已经改变</span><br><span class="line">&gt;&gt;&gt; data = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; data2 = sorted(data)		//对数据进行复制排序</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">[<span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]	//与原先一样</span><br><span class="line">&gt;&gt;&gt; data2</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]	//复制的数据从小到大排序</span><br></pre></td></tr></table></figure>
<p>sort()和sorted()默认按升序对数据排序，要以降序对数据排序，需要传入参数reverse=True</p>
<p>列表推导：<code>clean_mikey = [sanitize(each_t) for each_t in mikey]</code><br>clean_mikey：创建新列表<br>sanitize：指定一个转换<br>each_t：应用于各个数据项<br>mikey：一个现有列表</p>
<p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; mins =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt; secs = [m*<span class="number">60</span> <span class="keyword">for</span> m <span class="keyword">in</span> mins]</span><br><span class="line">&gt;&gt;&gt; secs</span><br><span class="line">[<span class="number">60</span>, <span class="number">120</span>, <span class="number">180</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lower = [<span class="string">"I"</span>,<span class="string">"don't"</span>,<span class="string">"like"</span>,<span class="string">"spam"</span>]</span><br><span class="line">&gt;&gt;&gt; upper = [s.upper() <span class="keyword">for</span> s <span class="keyword">in</span> lower]</span><br><span class="line">&gt;&gt;&gt; upper</span><br><span class="line">[<span class="string">'I'</span>, <span class="string">"DON'T"</span>, <span class="string">'LIKE'</span>, <span class="string">'SPAM'</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>工厂函数：</strong>用于创建某种类型的新的数据项。<br>set()：集合，无序、不允许重复<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distances = <span class="built_in">set</span>()	//用<span class="built_in">set</span>()创建一个新的空集合，并赋至变量distances</span><br><span class="line">&gt;&gt;&gt; distances=<span class="built_in">set</span>()</span><br><span class="line">&gt;&gt;&gt; distances=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">&gt;&gt;&gt; distances</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>列表分片</strong><br>list[3:6]        //这会访问列表中从索引位置3直到索引位置5的列表项(list[3]，list[4]，list[5])</p>
<p><img src="http://i2.tietuku.com/c6ef7ff02551f800.png" alt=""></p>
<p><strong>Python术语：</strong><br>“原地”排序：转换然后替换。<br>“复制”排序：转换然后返回。<br>“方法串链”：从左向右读，对数据应用一组方法。<br>“函数串链”：从右向左读，对数据应用一组函数。<br><strong>知识点：</strong><br>sort()方法可以在原地改变列表的数序。<br>sorted()BIF通过提供复制排序可以对几乎任何数据结构排序。<br>要访问一个列表中的多个数据项，可以使用分片。<br>使用set()工厂方法可以创建一个集合。</p>
<h3 id="第六章：定制数据对象">第六章：定制数据对象</h3><p><strong>字典：</strong>这是一个内置的数据结构(内置于python中)，允许将数据与键而不是数字关联。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cleese=&#123;&#125;	//使用大括号创建空字典</span><br><span class="line">&gt;&gt;&gt; palin=dict()		//使用工厂函数也能创建空字典</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(cleese)		//查看类型</span><br><span class="line">&lt;class <span class="string">'dict'</span>&gt;</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(palin)</span><br><span class="line">&lt;class <span class="string">'dict'</span>&gt;</span><br><span class="line">&gt;&gt;&gt; cleese[<span class="string">'Name'</span>] = <span class="string">'John Cleese'</span>	//通过将值与键关联，增加一些数据</span><br><span class="line">&gt;&gt;&gt; cleese[<span class="string">'Occupations'</span>]=[<span class="string">'actor'</span>,<span class="string">'comedian'</span>,<span class="string">'writer'</span>,<span class="string">'film producer'</span>]</span><br><span class="line">&gt;&gt;&gt; cleese[<span class="string">'age'</span>]=<span class="number">23</span></span><br><span class="line">&gt;&gt;&gt; palin = &#123;<span class="string">'Name'</span>:<span class="string">'Michael Palin'</span>,<span class="string">'Occupations'</span>:[<span class="string">'comedian'</span>,<span class="string">'actor'</span>,<span class="string">'writer'</span>,<span class="string">'tv'</span>]&#125; <span class="comment">#也可以一次性创建并增加数据</span></span><br><span class="line">&gt;&gt;&gt; palin[<span class="string">'Name'</span>]	//使用中括号指定的字典中的索引来访问数据项</span><br><span class="line"><span class="string">'Michael Palin'</span></span><br><span class="line">&gt;&gt;&gt; palin[<span class="string">'Birthplace'</span>]=<span class="string">"Broomhill, Sheffield, England"</span></span><br><span class="line">&gt;&gt;&gt; cleese[<span class="string">'Birthplace'</span>]=<span class="string">"Weston-super-Mare, North Somerset, England"</span></span><br><span class="line">&gt;&gt;&gt; cleese</span><br><span class="line">&#123;<span class="string">'Birthplace'</span>: <span class="string">'Weston-super-Mare, North Somerset, England'</span>, <span class="string">'Occupations'</span>: [<span class="string">'actor'</span>, <span class="string">'comedian'</span>, <span class="string">'writer'</span>, <span class="string">'film producer'</span>], <span class="string">'Name'</span>: <span class="string">'John Cleese'</span>, <span class="string">'age'</span>: <span class="number">23</span>&#125;</span><br><span class="line">&gt;&gt;&gt; palin</span><br><span class="line">&#123;<span class="string">'Birthplace'</span>: <span class="string">'Broomhill, Sheffield, England'</span>, <span class="string">'Occupations'</span>: [<span class="string">'comedian'</span>, <span class="string">'actor'</span>, <span class="string">'writer'</span>, <span class="string">'tv'</span>], <span class="string">'Name'</span>: <span class="string">'Michael Palin'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>类(class)</strong><br>在一个对象实例上调用类方法时，Python要求第一个参数是调用对象实例，因此类中定义的所有方法需要self作为它的第一个参数</p>
<p><strong>创建一个定制类：</strong></p>
<p><img src="http://i2.tietuku.com/e499b2ae04463897.png" alt=""></p>
<p><strong>继承</strong></p>
<p><img src="http://i2.tietuku.com/64a5682db403fa5e.png" alt=""></p>
<p><img src="http://i2.tietuku.com/b2706762f680b002.png" alt=""></p>
<p><strong>Python术语：</strong><br>“字典”：这时一个内置的数据结构，允许将数据值与键关联。<br><strong>知识点：</strong><br>类似于列表和集合，Python的字典会随着新数据增加到这个数据结构中而动态扩大。<br>类方法(代码)与函数的定义基本相同，也就是说，要用def关键字定义。<br>类中的每个属性前面都必须有self，从而将数据与其实例关联。<br>类可以从零开始构建，也可以从Python的内置类或其他定制类继承。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近利用闲暇时间开始学习Python，经朋友介绍，首先从《Head_First_Python》一书下手，现在读了一半，个人觉得此书非常有趣，内容包含了大量有趣的插图小故事，一次性读完100页都没有无聊的感觉，强力推荐Python新手阅读。还是老习惯，阅读过程中将一些知识点记录了下来，写成笔记，以用来查阅使用，也防止以后遗忘。<br>]]>
    
    </summary>
    
      <category term="Head_First_Python" scheme="http://opiece.me/tags/Head-First-Python/"/>
    
      <category term="Python" scheme="http://opiece.me/tags/Python/"/>
    
      <category term="笔记" scheme="http://opiece.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://opiece.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用swiftype实现站内搜索]]></title>
    <link href="http://opiece.me/2015/04/16/site-search-by-swiftype/"/>
    <id>http://opiece.me/2015/04/16/site-search-by-swiftype/</id>
    <published>2015-04-16T10:56:17.000Z</published>
    <updated>2015-04-18T01:54:05.609Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>首先，以下的内容是基于最新的swifytpe的教程，应该是2.0.0。<br>站内搜索顾名思义就是将范围限定在你的网站内，以此范围进行关键字搜索。<br>常见的站内搜索是google和baidu的，但是现在google需要翻墙，因此不予考虑，所以主要考虑百度的，我自己试过百度的站内搜索，感觉不是很好用，主要是新博客，收录的内容很少速度很慢。后来找到了一款名为<code>swiftype</code>的工具，感觉还不错，就使用了<code>swiftype</code>进行站内搜索。<br><a id="more"></a></p>
<h3 id="效果图">效果图</h3><p>首先，看一下<code>swiftype</code>应用在博客内的效果。</p>
<p>搜索框界面</p>
<p><img src="http://i2.tietuku.com/d3af9af0f8227571.png" alt=""></p>
<p>搜索结果界面</p>
<p><img src="http://i2.tietuku.com/b7217ec1802a2453.png" alt=""></p>
<h3 id="正文">正文</h3><p>下面开始设置自己的站内搜索。<br>1.到<code>swiftype</code>官网进行注册<a href="https://swiftype.com/users/sign_up" target="_blank" rel="external">swiftype注册</a><br>2.登陆<code>swiftype</code>后，点击<code>CREATE SEARCH ENGINE</code>，之后填入自己的网址等等几个操作。<br>3.进入install页面，如下图，左边有4个大的选项，分别为：外观、安装代码、搜索框、起动。<br><img src="http://i2.tietuku.com/d3fcb6b8f052f918.png" alt=""></p>
<p>4.在外观(appearance)一项，建议使用默认，一直<code>NEXT</code>，最后<code>SAVA&amp;PREVIEW</code><br>5.进入安装代码(install code)一项，将生成的代码复制一份，后面用到。<br>6.进入搜索框(search field)一项，如果你使用的主题跟我差不多，可以跟我的配置一样，只要改个id就行了，如下图。</p>
<p><img src="http://i2.tietuku.com/cea149abc1018a92.png" alt=""></p>
<p>如果你的博客没有搜索框，则可以选择下图这种</p>
<p><img src="http://i2.tietuku.com/a1cdadf0d94aba04.png" alt=""></p>
<p>7.进入最后一项(activate)，找到右下角的<code>ACTIVATE SWIFTYPE</code>按钮，点击即可，此时你已经完成了<code>swiftype</code>网站上的所有配置。</p>
<p>8.在<code>E:\hexo\themes\light\layout\_partial\after_footer.ejs</code>中添加第5步复制的代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="keyword">function</span>(w,d,t,u,n,s,e)&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(window,document,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'gngcYKRA61Ss_pfLd6uz'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>9.在<code>E:\hexo\themes\light\layout\_widget\search.ejs</code>中，修改代码如下，如果的主题跟我不同，那就在你的搜索框的<code>input</code>属性上加入<code>id=&quot;chillax-search-input&quot;</code>，记得将id改成第6步记下来的id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"search"</span>&gt;</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"search"</span> id=<span class="string">"chillax-search-input"</span> placeholder=<span class="string">"&lt;%= __('search') %&gt;"</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="总结">总结</h3><p><code>swiftype</code>在搜索框这一栏提供了多种选择，用户可以根据自己的需求选择合适的。<br><code>swiftype</code>的优点：<br>1.效果出现的很快，部署完所有东西后，很快就能进行站内搜索。<br>2.操作简单，方便。<br>如有任何疑问，欢迎留言讨论。</p>
<font color="red" size="5"><strong>原创文章，转载请注明出处。</strong></font>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>首先，以下的内容是基于最新的swifytpe的教程，应该是2.0.0。<br>站内搜索顾名思义就是将范围限定在你的网站内，以此范围进行关键字搜索。<br>常见的站内搜索是google和baidu的，但是现在google需要翻墙，因此不予考虑，所以主要考虑百度的，我自己试过百度的站内搜索，感觉不是很好用，主要是新博客，收录的内容很少速度很慢。后来找到了一款名为<code>swiftype</code>的工具，感觉还不错，就使用了<code>swiftype</code>进行站内搜索。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="swiftype" scheme="http://opiece.me/tags/swiftype/"/>
    
      <category term="站内搜索" scheme="http://opiece.me/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    
      <category term="swiftype" scheme="http://opiece.me/categories/swiftype/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo搭建博客的实用功能(下)(基于hexo3.0)]]></title>
    <link href="http://opiece.me/2015/04/16/hexo-guide-3/"/>
    <id>http://opiece.me/2015/04/16/hexo-guide-3/</id>
    <published>2015-04-16T05:52:29.000Z</published>
    <updated>2015-12-06T05:12:00.283Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>上一节讲到了很多个博客使用的功能，这一节将继续介绍其他的使用功能。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><h3 id="添加RSS">添加RSS</h3><p>1.安装RSS插件：<code>$ npm install hexo-generator-feed --save</code><br>2.对<code>E:\hexo\_config.yml</code>添加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<p>3.对<code>E:\hexo\themes\light\_config.yml</code>进行如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p>
<p>4.如果已经有RSS一栏，则不用执行此步。在<code>E:\hexo\themes\light\layout\_partial\header.ejs</code>中，找到<code>&lt;ul&gt;&lt;/ul&gt;</code>,在<code>&lt;ul&gt;&lt;/ul&gt;</code>之间添加<code>&lt;li&gt; &lt;a href=&quot;/atom.xml&quot;&gt;RSS&lt;/a&gt; &lt;/li&gt;</code>。<br>5.将<code>E:\hexo\_config.yml</code>中的url添加为自己的网址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://opiece.me</span><br></pre></td></tr></table></figure></p>
<h3 id="添加sitemap">添加sitemap</h3><p>1.安装sitemap插件：<code>$ npm install hexo-generator-sitemap --save</code><br>2.对<code>E:\hexo\_config.yml</code>添加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure></p>
<p>3.访问<code>opiece.me/sitemap.xml</code>，此处记得将<code>opiece.me</code>改成你的域名</p>
<h3 id="添加最新评论">添加最新评论</h3><p>1.在<code>E:\hexo\themes\light\_config.yml</code>的widgets下添加<code>- recent_comments</code><br>2.在<code>E:\hexo\themes\light\layout\_widget</code>下添加<code>recent_comments.ejs</code>文件，并填入如下代码，记得将short_name改为你自己的多说short_name。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"widget tag"</span>&gt;</span><br><span class="line">&lt;h3 class=<span class="string">"title"</span>&gt;最新评论&lt;/h3&gt;</span><br><span class="line">&lt;div class=<span class="string">"entry"</span>&gt;</span><br><span class="line">&lt;!-- 多说最新评论 start --&gt;</span><br><span class="line">	&lt;div class=<span class="string">"ds-recent-comments"</span> data-num-items=<span class="string">"5"</span> data-show-avatars=<span class="string">"1"</span> data-show-time=<span class="string">"1"</span> data-show-title=<span class="string">"1"</span> data-show-admin=<span class="string">"1"</span> data-excerpt-length=<span class="string">"70"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 多说最新评论 end --&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	var duoshuoQuery = &#123;short_name:<span class="string">"chillax"</span>&#125;;</span><br><span class="line">	(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">		var ds = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">		ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">		ds.src = (document.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">		ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">		(document.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span><br><span class="line">		 || document.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">	&#125;)();</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>3.在<code>E:\hexo\themes\light\languages\zh-CN.yml</code>添加<code>recent_comments: 最新评论</code><br>4.此步是针对本主题的界面优化，其他主题可以自由选择是否合适。在<code>E:\hexo\themes\light\source\css\_partial</code>中添加文件<code>recent_comment.styl</code>，并填入如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ds-recent-comments</span><br><span class="line">  li.ds-comment</span><br><span class="line">    &amp;:first-child</span><br><span class="line">      border-top none !important</span><br></pre></td></tr></table></figure></p>
<p>5.在<code>E:\hexo\themes\light\source\css\style.styl</code>添加<code>@import &#39;_partial/recent_comment&#39;</code></p>
<h3 id="添加文章导航">添加文章导航</h3><p>1.在<code>E:\hexo\themes\light\layout\_partial\post\article.ejs</code>找到<code>&lt;%- item.content %&gt;</code>,在<code>&lt;%- item.content %&gt;</code>上方插入如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(!index &amp;&amp; item.toc == <span class="literal">true</span>)&#123; %&gt;</span><br><span class="line">	&lt;div id=<span class="string">"toc"</span> class=<span class="string">"toc-article"</span>&gt;</span><br><span class="line">		&lt;strong class=<span class="string">"toc-title"</span>&gt;文章目录&lt;/strong&gt;</span><br><span class="line">		&lt;%- toc(item.content) %&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>2.在<code>E:\hexo\themes\light\source\css\_partial\article.styl</code>的最后填入如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.toc-article</span><br><span class="line">  <span class="built_in">float</span> right</span><br><span class="line">   </span><br><span class="line"><span class="comment">#toc</span></span><br><span class="line">  background <span class="comment">#eee</span></span><br><span class="line">  margin <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="number">20</span>px</span><br><span class="line">  padding <span class="number">12</span>px</span><br><span class="line">  line-height <span class="number">18</span>px</span><br><span class="line">  font-size <span class="number">10</span>px</span><br><span class="line">  strong</span><br><span class="line">    font-size <span class="number">15</span>px</span><br><span class="line">  ol</span><br><span class="line">    margin-top <span class="number">5</span>px</span><br><span class="line">    margin-left <span class="number">0</span></span><br><span class="line">  .toc</span><br><span class="line">    padding <span class="number">0</span></span><br><span class="line">    li</span><br><span class="line">      list-style-type none</span><br><span class="line">  .toc-child</span><br><span class="line">    padding-left <span class="number">20</span>px</span><br></pre></td></tr></table></figure></p>
<p>3.在要使用文章导航的文章首部加入<code>toc: true</code></p>
<h3 id="添加返回顶部">添加返回顶部</h3><p>1.在<code>E:\hexo\themes\light\layout\_partial</code>中添加文件<code>totop.ejs</code>,在文件中添加以下代码，如果你对返回顶部按钮的位置不满意，可以在下面这段代码的style里面进行参数修改，bottom是按钮相对于窗口底部的位置，right是按钮相对于窗口右部的位置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"totop"</span> style=<span class="string">"position:fixed;bottom:150px;right:20px;cursor: pointer;"</span>&gt;</span><br><span class="line">&lt;a title=<span class="string">"返回顶部"</span>&gt;&lt;img src=<span class="string">"/imgs/scrollup.png"</span>/&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2.在<code>E:\hexo\themes\light\source\js</code>中添加文件<code>totop.js</code>，在文件中添加以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>($) &#123; </span><br><span class="line">	// When to show the scroll link</span><br><span class="line">	// higher number = scroll link appears further down the page：显示返回顶部的位置</span><br><span class="line">	var upperLimit = <span class="number">1000</span>;</span><br><span class="line">	</span><br><span class="line">	// Our scroll link element</span><br><span class="line">	var scrollElem = $(<span class="string">'#totop'</span>);</span><br><span class="line">   </span><br><span class="line">	// Scroll to top speed：回滚速度</span><br><span class="line">	var scrollSpeed = <span class="number">500</span>;</span><br><span class="line">   </span><br><span class="line">	// Show and hide the scroll to top link based on scroll position   </span><br><span class="line">	scrollElem.hide();</span><br><span class="line">	$(window).scroll(<span class="function"><span class="title">function</span></span> () &#123;            </span><br><span class="line">		var scrollTop = $(document).scrollTop();       </span><br><span class="line">		<span class="keyword">if</span> ( scrollTop &gt; upperLimit ) &#123;</span><br><span class="line">			$(scrollElem).stop().fadeTo(<span class="number">300</span>, <span class="number">1</span>); // fade back <span class="keyword">in</span>           </span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;       </span><br><span class="line">			$(scrollElem).stop().fadeTo(<span class="number">300</span>, <span class="number">0</span>); // fade out</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	// Scroll to top animation on click</span><br><span class="line">	$(scrollElem).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		$(<span class="string">'html, body'</span>).animate(&#123;scrollTop:<span class="number">0</span>&#125;, scrollSpeed); <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p>
<p>3.添加对以上两段代码的引用，在<code>E:\hexo\themes\light\layout\_partial\after_footer.ejs</code>中的最下面，添加以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'totop'</span>) %&gt;</span><br><span class="line">&lt;script src=<span class="string">"&lt;%- config.root %&gt;js/totop.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>4.添加返回顶部按钮的图片，选择自己想要用的图片，将图片复制到<code>E:\hexo\themes\light\source\imgs</code>目录下，并将图片名字改为<code>scrollup.png</code>即可。<br>5.使用<code>$ hexo g</code>和<code>hexo d</code>发布，查看效果。</p>
<h3 id="参考">参考</h3><p><a href="http://kevinsfork.info/2015/02/25/hexo-light-enhance/" target="_blank" rel="external">Hexo折腾笔记（二）博客优化与定制</a><br><a href="http://wuchong.me/blog/2014/01/08/hexo-scrollup/" target="_blank" rel="external">Hexo博客优化：添加返回顶部功能</a></p>
<p>如果在搭建过程中，出现任何问题，欢迎留言，我会尽力帮您解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>上一节讲到了很多个博客使用的功能，这一节将继续介绍其他的使用功能。<br>]]>
    
    </summary>
    
      <category term="RSS" scheme="http://opiece.me/tags/RSS/"/>
    
      <category term="Sitemap" scheme="http://opiece.me/tags/Sitemap/"/>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="文章导航" scheme="http://opiece.me/tags/%E6%96%87%E7%AB%A0%E5%AF%BC%E8%88%AA/"/>
    
      <category term="返回顶部" scheme="http://opiece.me/tags/%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8/"/>
    
      <category term="hexo" scheme="http://opiece.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo搭建博客的实用功能(上)(基于hexo3.0)]]></title>
    <link href="http://opiece.me/2015/04/09/hexo-guide-2/"/>
    <id>http://opiece.me/2015/04/09/hexo-guide-2/</id>
    <published>2015-04-09T15:57:38.000Z</published>
    <updated>2015-05-06T04:47:22.010Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在上一节中，我们已经学会了使用hexo搭建博客，并且可以使用hexo发布博文。在这一节中，将介绍一些实用的功能，有了这些功能，博客系统看起来会更好用、好看和充实。<br><a id="more"></a></p>
<h3 id="使用工具来写文章">使用工具来写文章</h3><p>如果您还在使用记事本，或者是notepad++来写您的博客文章，那么我强烈建议您使用<a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a>，界面图如下，您可以边写边看到效果。不过这个效果对于有些命令并不管用，但这不影响MarkdownPad成为一款出色的Markdown编辑软件。<br><img src="http://markdownpad.com/img/markdownpad2.png" alt=""></p>
<h3 id="添加“多说”评论">添加“多说”评论</h3><p>正如你们看到的，我的每篇文章最下面都有一个用于评论的功能，如果要自己搞一个评论系统，估计得费不少功夫，但是多说已经帮我们实现了这个功能，我们只需要拿来用即可。步骤如下：<br>1、进入<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>，注册一个帐号，然后点击安装创建一个站点，获得通用代码(建议使用稳定版)。<br>2、两种情况。<br>第一种情况：如果您是使用的是<code>light</code>主题和基于<code>light</code>改善的主题，或者说您的<code>E:\hexo\themes\light\layout\_partial</code>文件夹下有comment.ejs，则将<code>E:\hexo\themes\light\layout\_partial\comment.ejs</code>的代码改成如下代码，其中short_name记得改成您自己的，在通用代码里可以看得到您的short_name。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> ( page.comments)&#123; %&gt;</span><br><span class="line"></span><br><span class="line"> &lt;nav id=<span class="string">"pagination"</span> &gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (page.prev) &#123; %&gt;</span><br><span class="line">    &lt;a href=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;"</span> class=<span class="string">"alignleft prev"</span> &gt;&lt;%= __(<span class="string">'prev'</span>) %&gt;&lt;/a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (page.next) &#123; %&gt;</span><br><span class="line">    &lt;a href=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;"</span> class=<span class="string">"alignright next"</span> &gt;&lt;%= __(<span class="string">'next'</span>) %&gt;&lt;/a&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;section id=<span class="string">"comment"</span>&gt;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	&lt;!-- 多说评论框 start --&gt;</span><br><span class="line">	&lt;div class=<span class="string">"ds-thread"</span> data-thread-key=<span class="string">"&lt;%= page.path %&gt;"</span> data-title=<span class="string">"&lt;%= page.title %&gt;"</span> data-url=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;&lt;/div&gt;</span><br><span class="line">	&lt;!-- 多说评论框 end --&gt;</span><br><span class="line">	&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	var duoshuoQuery = &#123;short_name:<span class="string">"chillax"</span>&#125;;</span><br><span class="line">	(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">		var ds = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">		ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">		ds.src = (document.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">		ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">		(document.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span><br><span class="line">		 || document.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">	&#125;)();</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">	&lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>第二种情况：如果您的<code>E:\hexo\themes\light\layout\_partial</code>文件下没有comment.ejs，则首先在<code>E:\hexo\themes\landscape\_config.yml</code>中添加多说的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo_shortname: 你站点的short_name</span><br></pre></td></tr></table></figure></p>
<p>然后修改<code>E:\hexo\themes\landscape\layout\_partial\article.ejs</code>模板，修改如下。<br>把(在article.ejs文件的底部)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">  &lt;section id=<span class="string">"comments"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"disqus_thread"</span>&gt;</span><br><span class="line">      &lt;noscript&gt;Please <span class="built_in">enable</span> JavaScript to view the &lt;a href=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</span><br><span class="line">  &lt;section id=<span class="string">"comments"</span>&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">    &lt;div class=<span class="string">"ds-thread"</span> data-thread-key=<span class="string">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> data-title=<span class="string">"&lt;%= post.title %&gt;"</span> data-url=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    var duoshuoQuery = &#123;short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>&#125;;</span><br><span class="line">      (<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var ds = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">        ds.src = (document.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">        ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">        (document.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span><br><span class="line">         || document.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">      &#125;)();</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>此处short_name不需要更改。</p>
<h3 id="添加百度分享">添加百度分享</h3><p>打开<code>E:\hexo\themes\light\layout\_partial\article.ejs</code>,找到<code>&lt;%- partial(&#39;post/tag&#39;) %&gt;</code>,然后看<code>&lt;%- partial(&#39;post/tag&#39;) %&gt;</code>下面有没有一行代码为<code>&lt;%-partial(&#39;post/share&#39;)%&gt;</code>,如果有则删除。然后在<code>&lt;%- partial(&#39;post/tag&#39;) %&gt;</code>下方添加如下代码,或者您也可以选择自己去<a href="http://share.baidu.com/code" target="_blank" rel="external">百度分享</a>获取代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"bdsharebuttonbox"</span>&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_qzone"</span> data-cmd=<span class="string">"qzone"</span> title=<span class="string">"分享到QQ空间"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_tsina"</span> data-cmd=<span class="string">"tsina"</span> title=<span class="string">"分享到新浪微博"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_tqq"</span> data-cmd=<span class="string">"tqq"</span> title=<span class="string">"分享到腾讯微博"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_renren"</span> data-cmd=<span class="string">"renren"</span> title=<span class="string">"分享到人人网"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_weixin"</span> data-cmd=<span class="string">"weixin"</span> title=<span class="string">"分享到微信"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_fbook"</span> data-cmd=<span class="string">"fbook"</span> title=<span class="string">"分享到Facebook"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_twi"</span> data-cmd=<span class="string">"twi"</span> title=<span class="string">"分享到Twitter"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_more"</span> data-cmd=<span class="string">"more"</span>&gt;&lt;/a&gt;</span><br><span class="line">	&lt;a href=<span class="string">"#"</span> class=<span class="string">"bds_count"</span> data-cmd=<span class="string">"count"</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window._bd_share_config=</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"common"</span>:&#123;</span><br><span class="line">		<span class="string">"bdSnsKey"</span>:&#123;&#125;,</span><br><span class="line">		<span class="string">"bdText"</span>:<span class="string">""</span>,</span><br><span class="line">		<span class="string">"bdMini"</span>:<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"bdMiniList"</span>:<span class="literal">false</span>,</span><br><span class="line">		<span class="string">"bdPic"</span>:<span class="string">""</span>,</span><br><span class="line">		<span class="string">"bdStyle"</span>:<span class="string">"0"</span>,</span><br><span class="line">		<span class="string">"bdSize"</span>:<span class="string">"24"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"share"</span>:&#123;&#125;,</span><br><span class="line">	<span class="string">"image"</span>:&#123;</span><br><span class="line">		<span class="string">"viewList"</span>:[<span class="string">"qzone"</span>,<span class="string">"tsina"</span>,<span class="string">"tqq"</span>,<span class="string">"renren"</span>,<span class="string">"weixin"</span>,<span class="string">"fbook"</span>,<span class="string">"twi"</span>],</span><br><span class="line">		<span class="string">"viewText"</span>:<span class="string">"分享到："</span>,</span><br><span class="line">		<span class="string">"viewSize"</span>:<span class="string">"24"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"selectShare"</span>:&#123;</span><br><span class="line">		<span class="string">"bdContainerClass"</span>:null,</span><br><span class="line">		<span class="string">"bdSelectMiniList"</span>:[<span class="string">"qzone"</span>,<span class="string">"tsina"</span>,<span class="string">"tqq"</span>,<span class="string">"renren"</span>,<span class="string">"weixin"</span>,<span class="string">"fbook"</span>,<span class="string">"twi"</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">with(document)<span class="number">0</span>[</span><br><span class="line">	(getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]||body).appendChild(createElement(<span class="string">'script'</span>)).src=<span class="string">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span>+~(-new Date()/<span class="number">36</span>e5)</span><br><span class="line">];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="添加小图标">添加小图标</h3><p>本博客为海贼王图标。打开<code>E:\hexo\themes\light\layout\_partial\head.ejs</code>，搜索<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.png&quot; rel=&quot;icon&quot;&gt;</code>，如果找不到，就搜索<code>&lt;link rel=&quot;icon&quot; href=&quot;&lt;%- theme.favicon %&gt;&quot;&gt;</code>，替换为<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-ico&quot;&gt;</code>，然后将名字为favicon.ico的图标放在<code>E:\hexo\themes\light\source</code>目录下。</p>
<h3 id="添加分类、标签云widget">添加分类、标签云widget</h3><p>在<code>E:\hexo\themes\light\_config.yml</code>中，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- category</span><br><span class="line">- tagcloud</span><br></pre></td></tr></table></figure></p>
<h3 id="添加友情链接和简介widget">添加友情链接和简介widget</h3><p>添加简介<br>1、在<code>E:\hexo\themes\light\layout\_widget</code>下新建名为intro.ejs的文件，编辑内容如下(可根据自身情况修改)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"widget tag"</span>&gt;</span><br><span class="line">&lt;h3 class=<span class="string">"title"</span>&gt;简介&lt;/h3&gt;</span><br><span class="line">&lt;ul class=<span class="string">"entry"</span>&gt;</span><br><span class="line">&lt;li&gt;本体：黄俊辉&lt;/li&gt;</span><br><span class="line">&lt;li&gt;外文：chillax | grace&lt;/li&gt;</span><br><span class="line">&lt;li&gt;现状：上海实习ing&lt;/li&gt;</span><br><span class="line">&lt;li&gt;职位：Java开发工程师&lt;/li&gt;</span><br><span class="line">&lt;li&gt;QQ  ：<span class="number">123411739</span>&lt;/li&gt;</span><br><span class="line">&lt;li&gt;邮箱：jhhuang1993@foxmail.com&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2、在<code>E:\hexo\themes\light\_config.yml</code>中，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- intro</span><br></pre></td></tr></table></figure></p>
<p>添加友情链接<br>在<code>E:\hexo\themes\light\layout\_widget</code>下新建名为blogroll.ejs的文件，编辑内容如下(可根据自身情况修改)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"widget tag"</span>&gt;</span><br><span class="line">&lt;h3 class=<span class="string">"title"</span>&gt;友情链接&lt;/h3&gt;</span><br><span class="line">&lt;ul class=<span class="string">"entry"</span>&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"http://huangjunhui.gitcafe.io/"</span> title=<span class="string">"Chillax's Blog"</span>&gt;Chillax&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>2、在<code>E:\hexo\themes\light\_config.yml</code>中，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- blogroll</span><br></pre></td></tr></table></figure></p>
<h3 id="添加新浪微博秀widget">添加新浪微博秀widget</h3><p>1、在<a href="http://open.weibo.com/widgets?cat=wb" target="_blank" rel="external">新浪微博开发平台</a>设置自己想要的微博秀样式，并复制生成的代码。<br>2、在<code>E:\hexo\themes\light\widget</code>中新建名为<code>weibo.ejs</code>的文件，并将刚才微博秀获得的代码直接保存在该文件下。<br>3、在<code>E:\hexo\themes\light\_config.yml</code>中，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- weibo</span><br></pre></td></tr></table></figure></p>
<h3 id="添加导航栏中的“关于”">添加导航栏中的“关于”</h3><p>1、在Git Bash下执行命令<code>$ hexo new page &quot;about&quot;</code><br>2、到<code>E:\hexo\source\about</code>下找到index.md，编辑自己想要的内容，格式和发普通文章一样。<br>3、在<code>E:\hexo\themes\light\_config.yml</code>中，添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  关于: /about</span><br></pre></td></tr></table></figure></p>
<h3 id="参考">参考</h3><p><a href="http://zipperary.com/2013/05/30/hexo-guide-4/" target="_blank" rel="external">hexo系列教程：（四）hexo博客的优化技巧</a></p>
<h2 id="结束语">结束语</h2><p>在下一节中，我们将介绍其他几种实用的功能，欢迎跟随。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>在上一节中，我们已经学会了使用hexo搭建博客，并且可以使用hexo发布博文。在这一节中，将介绍一些实用的功能，有了这些功能，博客系统看起来会更好用、好看和充实。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://opiece.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客(基于hexo3.0)]]></title>
    <link href="http://opiece.me/2015/04/09/hexo-guide/"/>
    <id>http://opiece.me/2015/04/09/hexo-guide/</id>
    <published>2015-04-09T05:32:09.000Z</published>
    <updated>2015-08-11T04:05:35.784Z</updated>
    <content type="html"><![CDATA[<h2 id="动机">动机</h2><p>前些天，自己刚刚接触hexo，并用hexo搭建了自己的博客，对hexo的强大搭建博客能力感到赞叹。用我的实际体验来说，你只要是有点计算机基础的人，完全可以轻松的使用hexo搭建起自己的博客。你要是用过github、oschina、gitcafe其中的一样，那对你来说，就可以分分钟上手了。其实网上使用hexo搭建博客的教程多的是，我自己也是跟着<a href="http://zipperary.com/" target="_blank" rel="external">zippera</a>的教程搭建的博客，那么我还写这篇博客是出于什么目的呢？原因如下：第一，网上的教程大多比较老了，我在搭建的过程中就遇到过不少问题，因此我觉得有必要写个适配hexo3.0的教程。第二，如你所见，本博客由于刚刚起步，博文少的可怜，因此写这篇博文也可以充场子，免得太冷清。第三，算是自己的个人笔记吧，我本人对于刚学的东西都喜欢用博文记录，免得以后自己忘掉。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><p>首先声明，本教程所针对的是windows用户。</p>
<h3 id="安装Git">安装Git</h3><p>下载并安装<a href="http://code.google.com/p/msysgit/" target="_blank" rel="external">msysgit</a>或者是<a href="http://www.xiazaiba.com/html/25984.html" target="_blank" rel="external">msysgit中文版</a>，如果你想了解点Git的基础命令，我推荐以下博文：<a href="http://opiece.me/2015/04/06/git-basic-commands/" target="_blank" rel="external">Git常用的基础命令</a>，<a href="http://blog.csdn.net/v123411739/article/details/44071059/" target="_blank" rel="external">史上最全github使用方法：github入门到精通</a>,当然即使你不懂Git的命令，跟着本博文走，也完全没问题。</p>
<h3 id="安装Node-js">安装Node.js</h3><p>下载并安装<a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a>，此处我建议安装完毕后重启电脑，因为我当初安装完没重启，结果后面使用命令安装hexo的时候，提示无效的命令，因此推荐重启。当然，你也可以选择等到后面遇到问题，再选择重启。</p>
<h3 id="安装hexo">安装hexo</h3><p>安装前先介绍几个hexo常用的命令,#后面为注释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class="line">$ hexo s <span class="comment">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class="line">$ hexo d <span class="comment">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class="line">$ hexo n <span class="comment">#完整命令为hexo new,用于新建一篇文章</span></span><br></pre></td></tr></table></figure></p>
<p>鼠标右键任意地方，选择Git Bash，使用以下命令安装hexo(ps：以下命令中的$符号只为了让教程和实际看起来一致，实际输入命令只需输入$ 后面的命令即可)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>
<p>如果之后在使用的过程中，遇到以下的错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found : github</span><br></pre></td></tr></table></figure></p>
<p>则运行以下命令,或者你直接先运行这个命令更好。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>
<p>接下来创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，如我hexo文件夹的位置为<code>E:\hexo</code>，名字和地方可以自由选择，当然最好不要放在中文路径下，至于原因，我想很多人懂得。之后进入文件夹，即<code>E:\hexo内</code>，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p>
<p>安装依赖包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>让我们看看刚刚下载的hexo文件带来了什么，在<code>E:\hexo</code>内执行以下命令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p>
<p>然后用浏览器访问<code>http://localhost:4000/</code>，此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。轻轻松松就看到了一点成果，是不是很激动，这就是hexo的强大之处，这个本地预览的功能，我真是爱不释手。</p>
<h3 id="注册Github帐号">注册Github帐号</h3><p>已经有Github帐号跳过此步，首先进入<a href="https://github.com/" target="_blank" rel="external">Github</a>进行注册，用户名、邮箱和密码之后都需要用到，自己记好。</p>
<h3 id="创建repository">创建repository</h3><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/" target="_blank" rel="external">Github</a>，并进入个人页面，选择<code>Repositories</code>(下图第一个红圈的地方)，然后<code>New</code>一个repository(下图第二个红圈的地方)<br><img src="http://i2.tietuku.com/1760ff1098ab76fd.png" alt=""><br>创建时，只需要填写Repository name即可，当然这个名字的格式必须为<code>youname.github.io</code>，例如我的为huangjunhui.github.io<br><img src="http://i2.tietuku.com/85f3fe313abc1402.png" alt=""></p>
<h3 id="部署本地文件到github">部署本地文件到github</h3><p>既然Repository已经创建了，当然是先把博客放到<code>Github</code>上去看看效果。编辑<code>E：\hexo</code>下的<code>_config.yml</code>文件，建议使用Notepad++。<br>在<code>_config.yml</code>最下方，添加如下配置(命令中的第一个huangjunhui为Github的用户名,第二个huangjunhui为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现<code>ERROR Deployer not found : github</code>，则参考上文的解决方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/huangjunhui/huangjunhui.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>配置好<code>_config.yml</code>并保存后，执行以下命令部署到Github上。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下，具体方法<a href="http://blog.csdn.net/v123411739/article/details/44071059/" target="_blank" rel="external">史上最全github使用方法：github入门到精通</a>里面有介绍到。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>
<p>执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。<br>此时，我们的博客已经搭建起来，并发布到Github上了，在浏览器访问<code>huangjunhui.github.io</code>就能看到自己的博客了。第一次访问刚地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。</p>
<h3 id="hexo的配置文件">hexo的配置文件</h3><p>hexo里面有两个常用到的配置文件，分别是整个博客的配置文件<code>E:\hexo\_config.yml</code>和主题的配置文件<code>E:\hexo\themes\light\_config.yml</code>，此地址是对于我来说，hexo3.0使用的默认主题是landscape，因此你们的地址应该是<code>E:\hexo\themes\landscape\_config.yml</code>，下文所有讲到light的地方，你们将之换为自己的主题名即可。本博客使用的主题是基于light改善的主题，目前还在完善中，如果完成的比较好，以后可能发布在<code>github</code>上。如果你想自己挑选喜欢的主题，hexo官方提供了12个<a href="http://hexo.io/themes/" target="_blank" rel="external">主题</a>供你自己选择，使用方法很简单，点击自己想要的主题，进入该主题的Repository，使用Git将主题clone到本地，然后将整个文件夹复制到<code>E:\hexo\themes</code>文件夹下，将<code>E&quot;\hexo\_config.yml</code>里的theme名字改为自己下载的主题的文件夹名即可。<br>接下来介绍整个博客的配置文件。<br>E:\hexo_config.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site	这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></span><br><span class="line">title: Chillax blog	<span class="comment">#博客名</span></span><br><span class="line">subtitle: Goals determine what you are going to be	<span class="comment">#副标题</span></span><br><span class="line">description: Goals determine what you are going to be <span class="comment">#用于搜索，没有直观表现</span></span><br><span class="line">author: huangjunhui	<span class="comment">#作者</span></span><br><span class="line">language: zh-CN	<span class="comment">#语言</span></span><br><span class="line">timezone: 	<span class="comment">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL	暂不配置，使用默认值</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory		暂不配置，使用默认值</span></span><br><span class="line"><span class="built_in">source</span>_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing	文章布局等，使用默认值</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_<span class="keyword">case</span>: <span class="number">0</span></span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag	暂不配置，使用默认值</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format	时间格式，使用默认值</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination	</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: <span class="number">10</span>	<span class="comment">#每页显示的文章数，0表示不分页</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions	插件配置，暂时不配置</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">theme: light	<span class="comment">#使用的主题</span></span><br><span class="line"></span><br><span class="line">feed:	<span class="comment">#之后配置rss会用，此处先不配置这个</span></span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: <span class="number">20</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment	用于部署到github，之前已经配置过</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/huangjunhui/huangjunhui.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>按照自己的意愿修改完后，执行<code>hexo g</code>，<code>hexo s</code>，打开<code>localhost:4000</code>看看效果。<br><code>E:\hexo\themes\light\_config.yml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">menu:	<span class="comment">#博客右上角的菜单栏，暂时使用默认值</span></span><br><span class="line">  首页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  关于: /about</span><br><span class="line">  </span><br><span class="line"><span class="comment">#该类对应于E:\hexo\themes\light\layout\_widget下的文件</span></span><br><span class="line">widgets:	<span class="comment">#站点右边栏，可以参照我的博客看，暂时使用默认值</span></span><br><span class="line">- intro		<span class="comment">#简介</span></span><br><span class="line">- search		<span class="comment">#搜索</span></span><br><span class="line">- category	<span class="comment">#分类</span></span><br><span class="line">- tagcloud	<span class="comment">#标签云</span></span><br><span class="line">- weibo		<span class="comment">#微博</span></span><br><span class="line">- blogroll	<span class="comment">#友情链接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">excerpt_link: Read more	<span class="comment">#文章下的Read more，可以改为'阅读全文'</span></span><br><span class="line"></span><br><span class="line">plugins:	<span class="comment">#插件，暂时使用默认值</span></span><br><span class="line"></span><br><span class="line">twitter:	<span class="comment">#twitter</span></span><br><span class="line">  username:</span><br><span class="line">  show_replies: <span class="literal">false</span></span><br><span class="line">  tweet_count: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">addthis:	<span class="comment">#SNS分享，暂时使用默认</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  pubid:</span><br><span class="line">  facebook: <span class="literal">true</span></span><br><span class="line">  twitter: <span class="literal">true</span></span><br><span class="line">  google: <span class="literal">true</span></span><br><span class="line">  pinterest: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">fancybox: <span class="literal">true</span>	<span class="comment">#图片效果，使用默认值</span></span><br><span class="line"></span><br><span class="line">google_analytics: </span><br><span class="line">rss: 	<span class="comment">#生成RSS，暂时使用默认值</span></span><br></pre></td></tr></table></figure></p>
<p>以上的改动不多，大多是介绍下功能。</p>
<h3 id="发表一篇文章">发表一篇文章</h3><p>1.在Git Bash执行命令：<code>$ hexo new &quot;my new post&quot;</code><br>2.在<code>E:\hexo\source\_post</code>中打开my-new-post.md，打开方式使用记事本或notepad++。<br>hexo中写文章使用的是Markdown，没接触过的可以看下<a href="http://wowubuntu.com/markdown/#p" target="_blank" rel="external">Markdown语法说明</a>,<a href="http://lutaf.com/markdown-simple-usage.htm" target="_blank" rel="external">一分钟学会Markdown</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: my new post <span class="comment">#可以改成中文的，如“新文章”</span></span><br><span class="line">date: <span class="number">2015</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">56</span>:<span class="number">29</span> <span class="comment">#发表日期，一般不改动</span></span><br><span class="line">categories: blog <span class="comment">#文章文类</span></span><br><span class="line">tags: [博客，文章] <span class="comment">#文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></span><br><span class="line">&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure></p>
<p>写完文章后，你可以使用1.<code>$ hexo g</code>生成静态文件。2.<code>$ hexo s</code>在本地预览效果。3.<code>hexo d</code>同步到github，然后使用<a href="http://huangjunhui.github.io" target="_blank" rel="external">http://huangjunhui.github.io</a>进行访问。</p>
<h3 id="参考">参考</h3><p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">hexo系列教程：（二）搭建hexo博客</a><br><a href="http://zipperary.com/2013/05/29/hexo-guide-3/" target="_blank" rel="external">hexo系列教程：（三）hexo博客的配置、使用</a></p>
<h2 id="总结">总结</h2><p>到现在为止，我们已经搭建起博客，并能写文章了，一个具备基本功能的博客已经实现了。由于本文是博主工作之余写的，比较仓促，难免有错误，欢迎指正。后面的文章将介绍本博客使用到的一些实用的功能，如访问次数，新浪微博秀，RSS，多说评论等，喜欢这些功能的朋友可以继续跟随。</p>
<p>本文非常详细的介绍了搭建过程，但是如果您还是在搭建的过程中碰到了问题，欢迎您在下面留言探讨。亦或是您觉得博主码文辛苦，想评论鼓励，博主也表示欢迎。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="动机">动机</h2><p>前些天，自己刚刚接触hexo，并用hexo搭建了自己的博客，对hexo的强大搭建博客能力感到赞叹。用我的实际体验来说，你只要是有点计算机基础的人，完全可以轻松的使用hexo搭建起自己的博客。你要是用过github、oschina、gitcafe其中的一样，那对你来说，就可以分分钟上手了。其实网上使用hexo搭建博客的教程多的是，我自己也是跟着<a href="http://zipperary.com/">zippera</a>的教程搭建的博客，那么我还写这篇博客是出于什么目的呢？原因如下：第一，网上的教程大多比较老了，我在搭建的过程中就遇到过不少问题，因此我觉得有必要写个适配hexo3.0的教程。第二，如你所见，本博客由于刚刚起步，博文少的可怜，因此写这篇博文也可以充场子，免得太冷清。第三，算是自己的个人笔记吧，我本人对于刚学的东西都喜欢用博文记录，免得以后自己忘掉。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://opiece.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git常用的基础命令]]></title>
    <link href="http://opiece.me/2015/04/06/git-basic-commands/"/>
    <id>http://opiece.me/2015/04/06/git-basic-commands/</id>
    <published>2015-04-06T11:52:45.000Z</published>
    <updated>2015-04-10T16:01:10.465Z</updated>
    <content type="html"><![CDATA[<h2 id="起步">起步</h2><p><strong>用户信息</strong><br>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “youname”</span><br><span class="line">$ git config --global user.email “<span class="number">12345</span>@example.com”</span><br></pre></td></tr></table></figure></p>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。<br><a id="more"></a></p>
<h2 id="GIT基础">GIT基础</h2><p><strong>查看配置信息</strong><br>查看已有的配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">$ git config <span class="operator">-l</span></span><br></pre></td></tr></table></figure></p>
<p><strong>获取帮助</strong><br>例如想获取config命令的帮助信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> config </span><br><span class="line">$ git config --help</span><br></pre></td></tr></table></figure></p>
<p><strong>初始化新仓库</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p>
<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><strong>跟踪文件：</strong>（将文件加到暂存区域）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure></p>
<p><strong>跟踪全部文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></p>
<p><strong>提交更新</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m “first version”</span><br></pre></td></tr></table></figure></p>
<p><strong>上传（推送）到github</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p>
<p><strong>从现有仓库克隆</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/youname/project.git</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:youname/project.git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/youname/project.git</span><br></pre></td></tr></table></figure></p>
<p><strong>检查当前文件状态</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></p>
<p><strong>创建.gitignore文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .gitignore</span><br></pre></td></tr></table></figure></p>
<p><strong>查看修改之后没有暂存起来的内容</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure></p>
<p><strong>移除文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm readme.txt</span><br></pre></td></tr></table></figure></p>
<p><strong>重命名文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv oldname.txt newname.txt</span><br></pre></td></tr></table></figure></p>
<p><strong>查看提交历史</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p>
<p><strong>取消暂存</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br></pre></td></tr></table></figure></p>
<p><strong>添加远程仓库</strong>（远程仓库必须先在github上建好）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure></p>
<p><strong>实例：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:youname/yourRepo.git</span><br></pre></td></tr></table></figure></p>
<p><strong>推送数据到仓库</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure></p>
<p>如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p>
<p><strong>从远程仓库抓取数据</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote-name]</span><br></pre></td></tr></table></figure></p>
<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库<br><strong>远程仓库的删除</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure></p>
<p><strong>远程仓库重命名</strong>(此处命名的是上文添加远程仓库中的shortname)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename origin origin2</span><br></pre></td></tr></table></figure></p>
<p><strong>自动补全</strong><br>输入命令后按tab键，就会看到列出所有匹配的可用命令建议：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co&lt;tab&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="GIT分支">GIT分支</h2><p><strong>创建一个名为“testing”的分支</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure></p>
<p><strong>切换到“testing”分支</strong>(默认为master分支)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure></p>
<p><strong>新建并切换到该分支</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b iss53</span><br></pre></td></tr></table></figure></p>
<p>这条命令相当于执行下面这两条命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch iss53</span><br><span class="line">$ git checkout iss53</span><br></pre></td></tr></table></figure></p>
<p><strong>删除hotfix分支</strong>（如果该分支还未被合并则会提示错误，因为这样会丢失数据）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="operator">-d</span> hotfix</span><br></pre></td></tr></table></figure></p>
<p><strong>强制删除hotfix分支</strong>（强制删除，不会提示错误）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D hotfix</span><br></pre></td></tr></table></figure></p>
<p><strong>合并iss53分支</strong>（先切换到master分支）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge iss53</span><br></pre></td></tr></table></figure></p>
<p><strong>查看当前所有分支</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></p>
<p><strong>查看各个分支最后一个提交对象的信息</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v</span><br></pre></td></tr></table></figure></p>
<p><strong>查看已经与当前分支合并的分支</strong>（已经合并的查出来后可以删掉）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merge</span><br></pre></td></tr></table></figure></p>
<p><strong>查看未与当前分支合并的分支</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure></p>
<p><strong>同步远程服务器数据到本地</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br></pre></td></tr></table></figure></p>
<p><strong>从新添加的远程仓库下载数据</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add teamone git://git.team1.ourcompany.com</span><br><span class="line">$ git fetch teamone</span><br></pre></td></tr></table></figure></p>
<p><strong>分化一个新的分支</strong>(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="built_in">test</span>1 origin/master</span><br></pre></td></tr></table></figure></p>
<p>假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支<br>删除该分支的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :<span class="built_in">test</span>1</span><br></pre></td></tr></table></figure></p>
<p><strong>分支的衍合：</strong>将test1分支衍合到master主分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="built_in">test</span>1</span><br><span class="line">$ git rebase master</span><br></pre></td></tr></table></figure></p>
<p>另一种方法，直接衍合，不用再先切换到test1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase master <span class="built_in">test</span>1</span><br></pre></td></tr></table></figure></p>
<p><strong>快进master分支</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge client</span><br></pre></td></tr></table></figure></p>
<p>衍合：一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起步">起步</h2><p><strong>用户信息</strong><br>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “youname”</span><br><span class="line">$ git config --global user.email “<span class="number">12345</span>@example.com”</span><br></pre></td></tr></table></figure></p>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://opiece.me/tags/git/"/>
    
      <category term="git" scheme="http://opiece.me/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始我的hexo博客]]></title>
    <link href="http://opiece.me/2015/04/06/start-my-hexo/"/>
    <id>http://opiece.me/2015/04/06/start-my-hexo/</id>
    <published>2015-04-06T10:52:46.000Z</published>
    <updated>2015-04-11T15:22:45.759Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>早就听说过github这个高大上的东西，也进过github看过，但因自己的英语水平有限，在满是英文的github页面上逗留了一会便关掉页面。<br>一个月前，在家无所事事，偶然机会看到一篇关于建立个人博客的教程，自己虽然在csdn上有一个博客，但是经常看着各种大神高大尚的个人博客，内心不禁来了兴头，决定搞一个个人博客。<br><a id="more"></a></p>
<h2 id="正文">正文</h2><p>因为我看到的建站教程是基于github pages，因此不得不开始了自己的github之旅。有了自己的github后便跟着教程一步步跟着学，期间也搜索过各式各样的github快速入门教程，很快便熟悉了基本的操作。因为教程年代久远，因此肯定有七的八的问题，通过找资料，最终都解决了，但是成品惨不忍睹—太丑了，只能舍弃。之后我还通读了Pro Git的前三章，深化了自己对git的认识，本来打算通读Pro Git，但后来发现只有前三章的内容是常用的，因此便只读了前三章。<br>前几天，看到了自己同学的个人博客，感觉还不错，很是喜欢，便向其索要教程，之后便跟着zippera的教程一步一步走，终于是成功，博客的样子还不错，简洁大方，而hexo提供的本地预览功能也让我爱不释手，写博文使用的markdown也比较容易上手，因此便决定将此站定为自己的个人博客，希望能成为对技术不断学习的动力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>早就听说过github这个高大上的东西，也进过github看过，但因自己的英语水平有限，在满是英文的github页面上逗留了一会便关掉页面。<br>一个月前，在家无所事事，偶然机会看到一篇关于建立个人博客的教程，自己虽然在csdn上有一个博客，但是经常看着各种大神高大尚的个人博客，内心不禁来了兴头，决定搞一个个人博客。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://opiece.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://opiece.me/categories/hexo/"/>
    
  </entry>
  
</feed>